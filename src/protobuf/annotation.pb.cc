// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: annotation.proto

#include "protobuf/annotation.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace xviz {
constexpr VisualBase::VisualBase(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct VisualBaseDefaultTypeInternal {
  constexpr VisualBaseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VisualBaseDefaultTypeInternal() {}
  union {
    VisualBase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VisualBaseDefaultTypeInternal _VisualBase_default_instance_;
constexpr Visual::Visual(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : style_classes_()
  , base_(nullptr)
  , inline_style_(nullptr){}
struct VisualDefaultTypeInternal {
  constexpr VisualDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VisualDefaultTypeInternal() {}
  union {
    Visual _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VisualDefaultTypeInternal _Visual_default_instance_;
}  // namespace xviz
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_annotation_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_annotation_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_annotation_2eproto = nullptr;

const uint32_t TableStruct_annotation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::VisualBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::VisualBase, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::Visual, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::Visual, base_),
  PROTOBUF_FIELD_OFFSET(::xviz::Visual, style_classes_),
  PROTOBUF_FIELD_OFFSET(::xviz::Visual, inline_style_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::xviz::VisualBase)},
  { 7, -1, -1, sizeof(::xviz::Visual)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_VisualBase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_Visual_default_instance_),
};

const char descriptor_table_protodef_annotation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020annotation.proto\022\004xviz\032\roptions.proto\032"
  "\013style.proto\"9\n\nVisualBase\022\021\n\tobject_id\030"
  "\001 \001(\t:\030\302\273\032\024core/annotation_base\"\211\001\n\006Visu"
  "al\022\036\n\004base\030\001 \001(\0132\020.xviz.VisualBase\022\025\n\rst"
  "yle_classes\030\002 \003(\t\022,\n\014inline_style\030\003 \001(\0132"
  "\026.xviz.StyleObjectValue:\032\302\273\032\026core/annota"
  "tion_visualb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_annotation_2eproto_deps[2] = {
  &::descriptor_table_options_2eproto,
  &::descriptor_table_style_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_annotation_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_annotation_2eproto = {
  false, false, 259, descriptor_table_protodef_annotation_2eproto, "annotation.proto", 
  &descriptor_table_annotation_2eproto_once, descriptor_table_annotation_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_annotation_2eproto::offsets,
  file_level_metadata_annotation_2eproto, file_level_enum_descriptors_annotation_2eproto, file_level_service_descriptors_annotation_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_annotation_2eproto_getter() {
  return &descriptor_table_annotation_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_annotation_2eproto(&descriptor_table_annotation_2eproto);
namespace xviz {

// ===================================================================

class VisualBase::_Internal {
 public:
};

VisualBase::VisualBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xviz.VisualBase)
}
VisualBase::VisualBase(const VisualBase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    object_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_object_id().empty()) {
    object_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_object_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:xviz.VisualBase)
}

inline void VisualBase::SharedCtor() {
object_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  object_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VisualBase::~VisualBase() {
  // @@protoc_insertion_point(destructor:xviz.VisualBase)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VisualBase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  object_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VisualBase::ArenaDtor(void* object) {
  VisualBase* _this = reinterpret_cast< VisualBase* >(object);
  (void)_this;
}
void VisualBase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VisualBase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VisualBase::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.VisualBase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VisualBase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_object_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.VisualBase.object_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VisualBase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.VisualBase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string object_id = 1;
  if (!this->_internal_object_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_object_id().data(), static_cast<int>(this->_internal_object_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.VisualBase.object_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.VisualBase)
  return target;
}

size_t VisualBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.VisualBase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string object_id = 1;
  if (!this->_internal_object_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VisualBase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VisualBase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VisualBase::GetClassData() const { return &_class_data_; }

void VisualBase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VisualBase *>(to)->MergeFrom(
      static_cast<const VisualBase &>(from));
}


void VisualBase::MergeFrom(const VisualBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.VisualBase)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_object_id().empty()) {
    _internal_set_object_id(from._internal_object_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VisualBase::CopyFrom(const VisualBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.VisualBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisualBase::IsInitialized() const {
  return true;
}

void VisualBase::InternalSwap(VisualBase* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &object_id_, lhs_arena,
      &other->object_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VisualBase::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_annotation_2eproto_getter, &descriptor_table_annotation_2eproto_once,
      file_level_metadata_annotation_2eproto[0]);
}

// ===================================================================

class Visual::_Internal {
 public:
  static const ::xviz::VisualBase& base(const Visual* msg);
  static const ::xviz::StyleObjectValue& inline_style(const Visual* msg);
};

const ::xviz::VisualBase&
Visual::_Internal::base(const Visual* msg) {
  return *msg->base_;
}
const ::xviz::StyleObjectValue&
Visual::_Internal::inline_style(const Visual* msg) {
  return *msg->inline_style_;
}
void Visual::clear_inline_style() {
  if (GetArenaForAllocation() == nullptr && inline_style_ != nullptr) {
    delete inline_style_;
  }
  inline_style_ = nullptr;
}
Visual::Visual(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  style_classes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xviz.Visual)
}
Visual::Visual(const Visual& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      style_classes_(from.style_classes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::xviz::VisualBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_inline_style()) {
    inline_style_ = new ::xviz::StyleObjectValue(*from.inline_style_);
  } else {
    inline_style_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:xviz.Visual)
}

inline void Visual::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&inline_style_) -
    reinterpret_cast<char*>(&base_)) + sizeof(inline_style_));
}

Visual::~Visual() {
  // @@protoc_insertion_point(destructor:xviz.Visual)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Visual::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete inline_style_;
}

void Visual::ArenaDtor(void* object) {
  Visual* _this = reinterpret_cast< Visual* >(object);
  (void)_this;
}
void Visual::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Visual::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Visual::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.Visual)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  style_classes_.Clear();
  if (GetArenaForAllocation() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArenaForAllocation() == nullptr && inline_style_ != nullptr) {
    delete inline_style_;
  }
  inline_style_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Visual::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .xviz.VisualBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string style_classes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_style_classes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.Visual.style_classes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .xviz.StyleObjectValue inline_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_inline_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Visual::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.Visual)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .xviz.VisualBase base = 1;
  if (this->_internal_has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // repeated string style_classes = 2;
  for (int i = 0, n = this->_internal_style_classes_size(); i < n; i++) {
    const auto& s = this->_internal_style_classes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.Visual.style_classes");
    target = stream->WriteString(2, s, target);
  }

  // .xviz.StyleObjectValue inline_style = 3;
  if (this->_internal_has_inline_style()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::inline_style(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.Visual)
  return target;
}

size_t Visual::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.Visual)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string style_classes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(style_classes_.size());
  for (int i = 0, n = style_classes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      style_classes_.Get(i));
  }

  // .xviz.VisualBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .xviz.StyleObjectValue inline_style = 3;
  if (this->_internal_has_inline_style()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inline_style_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Visual::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Visual::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Visual::GetClassData() const { return &_class_data_; }

void Visual::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Visual *>(to)->MergeFrom(
      static_cast<const Visual &>(from));
}


void Visual::MergeFrom(const Visual& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.Visual)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  style_classes_.MergeFrom(from.style_classes_);
  if (from._internal_has_base()) {
    _internal_mutable_base()->::xviz::VisualBase::MergeFrom(from._internal_base());
  }
  if (from._internal_has_inline_style()) {
    _internal_mutable_inline_style()->::xviz::StyleObjectValue::MergeFrom(from._internal_inline_style());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Visual::CopyFrom(const Visual& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.Visual)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Visual::IsInitialized() const {
  return true;
}

void Visual::InternalSwap(Visual* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  style_classes_.InternalSwap(&other->style_classes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Visual, inline_style_)
      + sizeof(Visual::inline_style_)
      - PROTOBUF_FIELD_OFFSET(Visual, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Visual::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_annotation_2eproto_getter, &descriptor_table_annotation_2eproto_once,
      file_level_metadata_annotation_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace xviz
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xviz::VisualBase* Arena::CreateMaybeMessage< ::xviz::VisualBase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::VisualBase >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::Visual* Arena::CreateMaybeMessage< ::xviz::Visual >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::Visual >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
