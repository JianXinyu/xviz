// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: session.proto

#include "protobuf/session.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace xviz {
constexpr Start::Start(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , profile_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , log_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_type_(0)

  , message_format_(0)
{}
struct StartDefaultTypeInternal {
  constexpr StartDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StartDefaultTypeInternal() {}
  union {
    Start _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StartDefaultTypeInternal _Start_default_instance_;
constexpr TransformLog::TransformLog(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : desired_streams_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_timestamp_(0)
  , end_timestamp_(0){}
struct TransformLogDefaultTypeInternal {
  constexpr TransformLogDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransformLogDefaultTypeInternal() {}
  union {
    TransformLog _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransformLogDefaultTypeInternal _TransformLog_default_instance_;
constexpr StateUpdate::StateUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : updates_()
  , update_type_(0)
{}
struct StateUpdateDefaultTypeInternal {
  constexpr StateUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StateUpdateDefaultTypeInternal() {}
  union {
    StateUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StateUpdateDefaultTypeInternal _StateUpdate_default_instance_;
constexpr TransformLogDone::TransformLogDone(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TransformLogDoneDefaultTypeInternal {
  constexpr TransformLogDoneDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransformLogDoneDefaultTypeInternal() {}
  union {
    TransformLogDone _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransformLogDoneDefaultTypeInternal _TransformLogDone_default_instance_;
constexpr TransformPointInTime::TransformPointInTime(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : desired_streams_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , query_timestamp_(0){}
struct TransformPointInTimeDefaultTypeInternal {
  constexpr TransformPointInTimeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransformPointInTimeDefaultTypeInternal() {}
  union {
    TransformPointInTime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransformPointInTimeDefaultTypeInternal _TransformPointInTime_default_instance_;
constexpr Reconfigure::Reconfigure(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : config_update_(nullptr)
  , update_type_(0)
{}
struct ReconfigureDefaultTypeInternal {
  constexpr ReconfigureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReconfigureDefaultTypeInternal() {}
  union {
    Reconfigure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReconfigureDefaultTypeInternal _Reconfigure_default_instance_;
constexpr Metadata_StreamsEntry_DoNotUse::Metadata_StreamsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Metadata_StreamsEntry_DoNotUseDefaultTypeInternal {
  constexpr Metadata_StreamsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Metadata_StreamsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Metadata_StreamsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Metadata_StreamsEntry_DoNotUseDefaultTypeInternal _Metadata_StreamsEntry_DoNotUse_default_instance_;
constexpr Metadata_CamerasEntry_DoNotUse::Metadata_CamerasEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Metadata_CamerasEntry_DoNotUseDefaultTypeInternal {
  constexpr Metadata_CamerasEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Metadata_CamerasEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Metadata_CamerasEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Metadata_CamerasEntry_DoNotUseDefaultTypeInternal _Metadata_CamerasEntry_DoNotUse_default_instance_;
constexpr Metadata_StreamAliasesEntry_DoNotUse::Metadata_StreamAliasesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Metadata_StreamAliasesEntry_DoNotUseDefaultTypeInternal {
  constexpr Metadata_StreamAliasesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Metadata_StreamAliasesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Metadata_StreamAliasesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Metadata_StreamAliasesEntry_DoNotUseDefaultTypeInternal _Metadata_StreamAliasesEntry_DoNotUse_default_instance_;
constexpr Metadata_UiConfigEntry_DoNotUse::Metadata_UiConfigEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Metadata_UiConfigEntry_DoNotUseDefaultTypeInternal {
  constexpr Metadata_UiConfigEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Metadata_UiConfigEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Metadata_UiConfigEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Metadata_UiConfigEntry_DoNotUseDefaultTypeInternal _Metadata_UiConfigEntry_DoNotUse_default_instance_;
constexpr Metadata::Metadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : streams_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , cameras_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , stream_aliases_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , ui_config_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , log_info_(nullptr){}
struct MetadataDefaultTypeInternal {
  constexpr MetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetadataDefaultTypeInternal() {}
  union {
    Metadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetadataDefaultTypeInternal _Metadata_default_instance_;
constexpr Error::Error(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ErrorDefaultTypeInternal {
  constexpr ErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ErrorDefaultTypeInternal() {}
  union {
    Error _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ErrorDefaultTypeInternal _Error_default_instance_;
constexpr StreamMetadata::StreamMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : style_classes_()
  , transform_()
  , source_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , units_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transform_callback_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stream_style_(nullptr)
  , category_(0)

  , scalar_type_(0)

  , primitive_type_(0)

  , ui_primitive_type_(0)

  , annotation_type_(0)

  , coordinate_(0)
{}
struct StreamMetadataDefaultTypeInternal {
  constexpr StreamMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamMetadataDefaultTypeInternal() {}
  union {
    StreamMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamMetadataDefaultTypeInternal _StreamMetadata_default_instance_;
constexpr CameraInfo::CameraInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vehicle_position_()
  , vehicle_orientation_()
  , rectification_projection_()
  , gl_projection_()
  , human_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , source_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pixel_width_(0)
  , pixel_height_(0){}
struct CameraInfoDefaultTypeInternal {
  constexpr CameraInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CameraInfoDefaultTypeInternal() {}
  union {
    CameraInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CameraInfoDefaultTypeInternal _CameraInfo_default_instance_;
constexpr UIPanelInfo::UIPanelInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : needed_streams_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , config_(nullptr){}
struct UIPanelInfoDefaultTypeInternal {
  constexpr UIPanelInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UIPanelInfoDefaultTypeInternal() {}
  union {
    UIPanelInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UIPanelInfoDefaultTypeInternal _UIPanelInfo_default_instance_;
constexpr LogInfo::LogInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_time_(0)
  , end_time_(0){}
struct LogInfoDefaultTypeInternal {
  constexpr LogInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogInfoDefaultTypeInternal() {}
  union {
    LogInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogInfoDefaultTypeInternal _LogInfo_default_instance_;
}  // namespace xviz
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_session_2eproto[16];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_session_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_session_2eproto = nullptr;

const uint32_t TableStruct_session_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::Start, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::Start, version_),
  PROTOBUF_FIELD_OFFSET(::xviz::Start, profile_),
  PROTOBUF_FIELD_OFFSET(::xviz::Start, session_type_),
  PROTOBUF_FIELD_OFFSET(::xviz::Start, message_format_),
  PROTOBUF_FIELD_OFFSET(::xviz::Start, log_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::TransformLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::TransformLog, id_),
  PROTOBUF_FIELD_OFFSET(::xviz::TransformLog, start_timestamp_),
  PROTOBUF_FIELD_OFFSET(::xviz::TransformLog, end_timestamp_),
  PROTOBUF_FIELD_OFFSET(::xviz::TransformLog, desired_streams_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::StateUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::StateUpdate, update_type_),
  PROTOBUF_FIELD_OFFSET(::xviz::StateUpdate, updates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::TransformLogDone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::TransformLogDone, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::TransformPointInTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::TransformPointInTime, id_),
  PROTOBUF_FIELD_OFFSET(::xviz::TransformPointInTime, query_timestamp_),
  PROTOBUF_FIELD_OFFSET(::xviz::TransformPointInTime, desired_streams_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::Reconfigure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::Reconfigure, update_type_),
  PROTOBUF_FIELD_OFFSET(::xviz::Reconfigure, config_update_),
  PROTOBUF_FIELD_OFFSET(::xviz::Metadata_StreamsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xviz::Metadata_StreamsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::Metadata_StreamsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::xviz::Metadata_StreamsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::xviz::Metadata_CamerasEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xviz::Metadata_CamerasEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::Metadata_CamerasEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::xviz::Metadata_CamerasEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::xviz::Metadata_StreamAliasesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xviz::Metadata_StreamAliasesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::Metadata_StreamAliasesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::xviz::Metadata_StreamAliasesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::xviz::Metadata_UiConfigEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xviz::Metadata_UiConfigEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::Metadata_UiConfigEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::xviz::Metadata_UiConfigEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::Metadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::Metadata, version_),
  PROTOBUF_FIELD_OFFSET(::xviz::Metadata, streams_),
  PROTOBUF_FIELD_OFFSET(::xviz::Metadata, cameras_),
  PROTOBUF_FIELD_OFFSET(::xviz::Metadata, stream_aliases_),
  PROTOBUF_FIELD_OFFSET(::xviz::Metadata, ui_config_),
  PROTOBUF_FIELD_OFFSET(::xviz::Metadata, log_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::Error, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::StreamMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::StreamMetadata, source_),
  PROTOBUF_FIELD_OFFSET(::xviz::StreamMetadata, units_),
  PROTOBUF_FIELD_OFFSET(::xviz::StreamMetadata, category_),
  PROTOBUF_FIELD_OFFSET(::xviz::StreamMetadata, scalar_type_),
  PROTOBUF_FIELD_OFFSET(::xviz::StreamMetadata, primitive_type_),
  PROTOBUF_FIELD_OFFSET(::xviz::StreamMetadata, ui_primitive_type_),
  PROTOBUF_FIELD_OFFSET(::xviz::StreamMetadata, annotation_type_),
  PROTOBUF_FIELD_OFFSET(::xviz::StreamMetadata, stream_style_),
  PROTOBUF_FIELD_OFFSET(::xviz::StreamMetadata, style_classes_),
  PROTOBUF_FIELD_OFFSET(::xviz::StreamMetadata, coordinate_),
  PROTOBUF_FIELD_OFFSET(::xviz::StreamMetadata, transform_),
  PROTOBUF_FIELD_OFFSET(::xviz::StreamMetadata, transform_callback_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::CameraInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::CameraInfo, human_name_),
  PROTOBUF_FIELD_OFFSET(::xviz::CameraInfo, source_),
  PROTOBUF_FIELD_OFFSET(::xviz::CameraInfo, vehicle_position_),
  PROTOBUF_FIELD_OFFSET(::xviz::CameraInfo, vehicle_orientation_),
  PROTOBUF_FIELD_OFFSET(::xviz::CameraInfo, pixel_width_),
  PROTOBUF_FIELD_OFFSET(::xviz::CameraInfo, pixel_height_),
  PROTOBUF_FIELD_OFFSET(::xviz::CameraInfo, rectification_projection_),
  PROTOBUF_FIELD_OFFSET(::xviz::CameraInfo, gl_projection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::UIPanelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::UIPanelInfo, name_),
  PROTOBUF_FIELD_OFFSET(::xviz::UIPanelInfo, needed_streams_),
  PROTOBUF_FIELD_OFFSET(::xviz::UIPanelInfo, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::LogInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::LogInfo, start_time_),
  PROTOBUF_FIELD_OFFSET(::xviz::LogInfo, end_time_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::xviz::Start)},
  { 11, -1, -1, sizeof(::xviz::TransformLog)},
  { 21, -1, -1, sizeof(::xviz::StateUpdate)},
  { 29, -1, -1, sizeof(::xviz::TransformLogDone)},
  { 36, -1, -1, sizeof(::xviz::TransformPointInTime)},
  { 45, -1, -1, sizeof(::xviz::Reconfigure)},
  { 53, 61, -1, sizeof(::xviz::Metadata_StreamsEntry_DoNotUse)},
  { 63, 71, -1, sizeof(::xviz::Metadata_CamerasEntry_DoNotUse)},
  { 73, 81, -1, sizeof(::xviz::Metadata_StreamAliasesEntry_DoNotUse)},
  { 83, 91, -1, sizeof(::xviz::Metadata_UiConfigEntry_DoNotUse)},
  { 93, -1, -1, sizeof(::xviz::Metadata)},
  { 105, -1, -1, sizeof(::xviz::Error)},
  { 112, -1, -1, sizeof(::xviz::StreamMetadata)},
  { 130, -1, -1, sizeof(::xviz::CameraInfo)},
  { 144, -1, -1, sizeof(::xviz::UIPanelInfo)},
  { 153, -1, -1, sizeof(::xviz::LogInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_Start_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_TransformLog_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_StateUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_TransformLogDone_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_TransformPointInTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_Reconfigure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_Metadata_StreamsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_Metadata_CamerasEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_Metadata_StreamAliasesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_Metadata_UiConfigEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_Metadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_Error_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_StreamMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_CameraInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_UIPanelInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_LogInfo_default_instance_),
};

const char descriptor_table_protodef_session_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rsession.proto\022\004xviz\032\034google/protobuf/s"
  "truct.proto\032\ncore.proto\032\roptions.proto\032\013"
  "style.proto\"\356\001\n\005Start\022\017\n\007version\030\001 \001(\t\022\017"
  "\n\007profile\030\002 \001(\t\022\'\n\014session_type\030\003 \001(\0162\021."
  "xviz.SessionType\0221\n\016message_format\030\004 \001(\016"
  "2\031.xviz.Start.MessageFormat\022\013\n\003log\030\005 \001(\t"
  "\"G\n\rMessageFormat\022 \n\034START_MESSAGE_FORMA"
  "T_INVALID\020\000\022\010\n\004JSON\020\001\022\n\n\006BINARY\020\002:\021\302\273\032\rs"
  "ession/start\"~\n\014TransformLog\022\n\n\002id\030\001 \001(\t"
  "\022\027\n\017start_timestamp\030\002 \001(\001\022\025\n\rend_timesta"
  "mp\030\003 \001(\001\022\027\n\017desired_streams\030\004 \003(\t:\031\302\273\032\025s"
  "ession/transform_log\"\363\001\n\013StateUpdate\0221\n\013"
  "update_type\030\001 \001(\0162\034.xviz.StateUpdate.Upd"
  "ateType\022 \n\007updates\030\002 \003(\0132\017.xviz.StreamSe"
  "t\"u\n\nUpdateType\022$\n STATE_UPDATE_UPDATE_T"
  "YPE_INVALID\020\000\022\014\n\010SNAPSHOT\020\001\022\017\n\013INCREMENT"
  "AL\020\002\022\022\n\016COMPLETE_STATE\020\003\022\016\n\nPERSISTENT\020\004"
  ":\030\302\273\032\024session/state_update\">\n\020TransformL"
  "ogDone\022\n\n\002id\030\001 \001(\t:\036\302\273\032\032session/transfor"
  "m_log_done\"y\n\024TransformPointInTime\022\n\n\002id"
  "\030\001 \001(\t\022\027\n\017query_timestamp\030\002 \001(\001\022\027\n\017desir"
  "ed_streams\030\003 \003(\t:#\302\273\032\037session/transform_"
  "point_in_time\"\321\001\n\013Reconfigure\0221\n\013update_"
  "type\030\001 \001(\0162\034.xviz.Reconfigure.UpdateType"
  "\022.\n\rconfig_update\030\002 \001(\0132\027.google.protobu"
  "f.Struct\"F\n\nUpdateType\022#\n\037RECONFIGURE_UP"
  "DATE_TYPE_INVALID\020\000\022\t\n\005DELTA\020\001\022\010\n\004FULL\020\002"
  ":\027\302\273\032\023session/reconfigure\"\234\004\n\010Metadata\022\017"
  "\n\007version\030\001 \001(\t\022,\n\007streams\030\002 \003(\0132\033.xviz."
  "Metadata.StreamsEntry\022,\n\007cameras\030\003 \003(\0132\033"
  ".xviz.Metadata.CamerasEntry\0229\n\016stream_al"
  "iases\030\004 \003(\0132!.xviz.Metadata.StreamAliase"
  "sEntry\022/\n\tui_config\030\005 \003(\0132\034.xviz.Metadat"
  "a.UiConfigEntry\022\037\n\010log_info\030\006 \001(\0132\r.xviz"
  ".LogInfo\032D\n\014StreamsEntry\022\013\n\003key\030\001 \001(\t\022#\n"
  "\005value\030\002 \001(\0132\024.xviz.StreamMetadata:\0028\001\032@"
  "\n\014CamerasEntry\022\013\n\003key\030\001 \001(\t\022\037\n\005value\030\002 \001"
  "(\0132\020.xviz.CameraInfo:\0028\001\0324\n\022StreamAliase"
  "sEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032B"
  "\n\rUiConfigEntry\022\013\n\003key\030\001 \001(\t\022 \n\005value\030\002 "
  "\001(\0132\021.xviz.UIPanelInfo:\0028\001:\024\302\273\032\020session/"
  "metadata\"+\n\005Error\022\017\n\007message\030\001 \001(\t:\021\302\273\032\r"
  "session/error\"\340\t\n\016StreamMetadata\022\016\n\006sour"
  "ce\030\001 \001(\t\022\r\n\005units\030\002 \001(\t\022/\n\010category\030\003 \001("
  "\0162\035.xviz.StreamMetadata.Category\0224\n\013scal"
  "ar_type\030\004 \001(\0162\037.xviz.StreamMetadata.Scal"
  "arType\022:\n\016primitive_type\030\005 \001(\0162\".xviz.St"
  "reamMetadata.PrimitiveType\022\?\n\021ui_primiti"
  "ve_type\030\006 \001(\0162$.xviz.StreamMetadata.UIPr"
  "imitiveType\022<\n\017annotation_type\030\007 \001(\0162#.x"
  "viz.StreamMetadata.AnnotationType\022,\n\014str"
  "eam_style\030\010 \001(\0132\026.xviz.StyleStreamValue\022"
  "\'\n\rstyle_classes\030\t \003(\0132\020.xviz.StyleClass"
  "\0227\n\ncoordinate\030\n \001(\0162#.xviz.StreamMetada"
  "ta.CoordinateType\022\021\n\ttransform\030\013 \003(\001\022\032\n\022"
  "transform_callback\030\014 \001(\t\"\237\001\n\010Category\022$\n"
  " STREAM_METADATA_CATEGORY_INVALID\020\000\022\r\n\tP"
  "RIMITIVE\020\001\022\017\n\013TIME_SERIES\020\002\022\014\n\010VARIABLE\020"
  "\003\022\016\n\nANNOTATION\020\004\022\023\n\017FUTURE_INSTANCE\020\005\022\010"
  "\n\004POSE\020\006\022\020\n\014UI_PRIMITIVE\020\007\"a\n\nScalarType"
  "\022\'\n#STREAM_METADATA_SCALAR_TYPE_INVALID\020"
  "\000\022\t\n\005FLOAT\020\001\022\t\n\005INT32\020\002\022\n\n\006STRING\020\003\022\010\n\004B"
  "OOL\020\004\"\217\001\n\rPrimitiveType\022*\n&STREAM_METADA"
  "TA_PRIMITIVE_TYPE_INVALID\020\000\022\n\n\006CIRCLE\020\001\022"
  "\t\n\005IMAGE\020\002\022\t\n\005POINT\020\003\022\013\n\007POLYGON\020\004\022\014\n\010PO"
  "LYLINE\020\005\022\013\n\007STADIUM\020\006\022\010\n\004TEXT\020\007\"O\n\017UIPri"
  "mitiveType\022-\n)STREAM_METADATA_UI_PRIMITI"
  "VE_TYPE_INVALID\020\000\022\r\n\tTREETABLE\020\001\"I\n\016Anno"
  "tationType\022+\n\'STREAM_METADATA_ANNOTATION"
  "_TYPE_INVALID\020\000\022\n\n\006VISUAL\020\001\"~\n\016Coordinat"
  "eType\022+\n\'STREAM_METADATA_COORDINATE_TYPE"
  "_INVALID\020\000\022\016\n\nGEOGRAPHIC\020\001\022\014\n\010IDENTITY\020\002"
  "\022\013\n\007DYNAMIC\020\003\022\024\n\020VEHICLE_RELATIVE\020\004:\033\302\273\032"
  "\027session/stream_metadata\"\344\001\n\nCameraInfo\022"
  "\022\n\nhuman_name\030\001 \001(\t\022\016\n\006source\030\002 \001(\t\022\030\n\020v"
  "ehicle_position\030\003 \003(\001\022\033\n\023vehicle_orienta"
  "tion\030\004 \003(\001\022\023\n\013pixel_width\030\005 \001(\001\022\024\n\014pixel"
  "_height\030\006 \001(\001\022 \n\030rectification_projectio"
  "n\030\007 \003(\001\022\025\n\rgl_projection\030\010 \003(\001:\027\302\273\032\023sess"
  "ion/camera_info\"w\n\013UIPanelInfo\022\014\n\004name\030\001"
  " \001(\t\022\026\n\016needed_streams\030\002 \003(\t\022\'\n\006config\030\003"
  " \001(\0132\027.google.protobuf.Struct:\031\302\273\032\025sessi"
  "on/ui_panel_info\"E\n\007LogInfo\022\022\n\nstart_tim"
  "e\030\001 \001(\001\022\020\n\010end_time\030\002 \001(\001:\024\302\273\032\020session/l"
  "og_info*N\n\013SessionType\022\030\n\024SESSION_TYPE_I"
  "NVALID\020\000\022\010\n\004LIVE\020\001\022\007\n\003LOG\020\002\022\022\n\016UNBUFFERE"
  "D_LOG\020\003B>\n\013com.xviz.v2B\014SessionProtoP\001Z\004"
  "v2pb\242\002\004XVIZ\252\002\007xviz.V2\312\002\007Xviz\\V2b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_session_2eproto_deps[4] = {
  &::descriptor_table_core_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_options_2eproto,
  &::descriptor_table_style_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_session_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_session_2eproto = {
  false, false, 3519, descriptor_table_protodef_session_2eproto, "session.proto", 
  &descriptor_table_session_2eproto_once, descriptor_table_session_2eproto_deps, 4, 16,
  schemas, file_default_instances, TableStruct_session_2eproto::offsets,
  file_level_metadata_session_2eproto, file_level_enum_descriptors_session_2eproto, file_level_service_descriptors_session_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_session_2eproto_getter() {
  return &descriptor_table_session_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_session_2eproto(&descriptor_table_session_2eproto);
namespace xviz {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Start_MessageFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_session_2eproto);
  return file_level_enum_descriptors_session_2eproto[0];
}
bool Start_MessageFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Start_MessageFormat Start::START_MESSAGE_FORMAT_INVALID;
constexpr Start_MessageFormat Start::JSON;
constexpr Start_MessageFormat Start::BINARY;
constexpr Start_MessageFormat Start::MessageFormat_MIN;
constexpr Start_MessageFormat Start::MessageFormat_MAX;
constexpr int Start::MessageFormat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StateUpdate_UpdateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_session_2eproto);
  return file_level_enum_descriptors_session_2eproto[1];
}
bool StateUpdate_UpdateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr StateUpdate_UpdateType StateUpdate::STATE_UPDATE_UPDATE_TYPE_INVALID;
constexpr StateUpdate_UpdateType StateUpdate::SNAPSHOT;
constexpr StateUpdate_UpdateType StateUpdate::INCREMENTAL;
constexpr StateUpdate_UpdateType StateUpdate::COMPLETE_STATE;
constexpr StateUpdate_UpdateType StateUpdate::PERSISTENT;
constexpr StateUpdate_UpdateType StateUpdate::UpdateType_MIN;
constexpr StateUpdate_UpdateType StateUpdate::UpdateType_MAX;
constexpr int StateUpdate::UpdateType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Reconfigure_UpdateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_session_2eproto);
  return file_level_enum_descriptors_session_2eproto[2];
}
bool Reconfigure_UpdateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Reconfigure_UpdateType Reconfigure::RECONFIGURE_UPDATE_TYPE_INVALID;
constexpr Reconfigure_UpdateType Reconfigure::DELTA;
constexpr Reconfigure_UpdateType Reconfigure::FULL;
constexpr Reconfigure_UpdateType Reconfigure::UpdateType_MIN;
constexpr Reconfigure_UpdateType Reconfigure::UpdateType_MAX;
constexpr int Reconfigure::UpdateType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamMetadata_Category_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_session_2eproto);
  return file_level_enum_descriptors_session_2eproto[3];
}
bool StreamMetadata_Category_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr StreamMetadata_Category StreamMetadata::STREAM_METADATA_CATEGORY_INVALID;
constexpr StreamMetadata_Category StreamMetadata::PRIMITIVE;
constexpr StreamMetadata_Category StreamMetadata::TIME_SERIES;
constexpr StreamMetadata_Category StreamMetadata::VARIABLE;
constexpr StreamMetadata_Category StreamMetadata::ANNOTATION;
constexpr StreamMetadata_Category StreamMetadata::FUTURE_INSTANCE;
constexpr StreamMetadata_Category StreamMetadata::POSE;
constexpr StreamMetadata_Category StreamMetadata::UI_PRIMITIVE;
constexpr StreamMetadata_Category StreamMetadata::Category_MIN;
constexpr StreamMetadata_Category StreamMetadata::Category_MAX;
constexpr int StreamMetadata::Category_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamMetadata_ScalarType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_session_2eproto);
  return file_level_enum_descriptors_session_2eproto[4];
}
bool StreamMetadata_ScalarType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr StreamMetadata_ScalarType StreamMetadata::STREAM_METADATA_SCALAR_TYPE_INVALID;
constexpr StreamMetadata_ScalarType StreamMetadata::FLOAT;
constexpr StreamMetadata_ScalarType StreamMetadata::INT32;
constexpr StreamMetadata_ScalarType StreamMetadata::STRING;
constexpr StreamMetadata_ScalarType StreamMetadata::BOOL;
constexpr StreamMetadata_ScalarType StreamMetadata::ScalarType_MIN;
constexpr StreamMetadata_ScalarType StreamMetadata::ScalarType_MAX;
constexpr int StreamMetadata::ScalarType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamMetadata_PrimitiveType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_session_2eproto);
  return file_level_enum_descriptors_session_2eproto[5];
}
bool StreamMetadata_PrimitiveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr StreamMetadata_PrimitiveType StreamMetadata::STREAM_METADATA_PRIMITIVE_TYPE_INVALID;
constexpr StreamMetadata_PrimitiveType StreamMetadata::CIRCLE;
constexpr StreamMetadata_PrimitiveType StreamMetadata::IMAGE;
constexpr StreamMetadata_PrimitiveType StreamMetadata::POINT;
constexpr StreamMetadata_PrimitiveType StreamMetadata::POLYGON;
constexpr StreamMetadata_PrimitiveType StreamMetadata::POLYLINE;
constexpr StreamMetadata_PrimitiveType StreamMetadata::STADIUM;
constexpr StreamMetadata_PrimitiveType StreamMetadata::TEXT;
constexpr StreamMetadata_PrimitiveType StreamMetadata::PrimitiveType_MIN;
constexpr StreamMetadata_PrimitiveType StreamMetadata::PrimitiveType_MAX;
constexpr int StreamMetadata::PrimitiveType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamMetadata_UIPrimitiveType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_session_2eproto);
  return file_level_enum_descriptors_session_2eproto[6];
}
bool StreamMetadata_UIPrimitiveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr StreamMetadata_UIPrimitiveType StreamMetadata::STREAM_METADATA_UI_PRIMITIVE_TYPE_INVALID;
constexpr StreamMetadata_UIPrimitiveType StreamMetadata::TREETABLE;
constexpr StreamMetadata_UIPrimitiveType StreamMetadata::UIPrimitiveType_MIN;
constexpr StreamMetadata_UIPrimitiveType StreamMetadata::UIPrimitiveType_MAX;
constexpr int StreamMetadata::UIPrimitiveType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamMetadata_AnnotationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_session_2eproto);
  return file_level_enum_descriptors_session_2eproto[7];
}
bool StreamMetadata_AnnotationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr StreamMetadata_AnnotationType StreamMetadata::STREAM_METADATA_ANNOTATION_TYPE_INVALID;
constexpr StreamMetadata_AnnotationType StreamMetadata::VISUAL;
constexpr StreamMetadata_AnnotationType StreamMetadata::AnnotationType_MIN;
constexpr StreamMetadata_AnnotationType StreamMetadata::AnnotationType_MAX;
constexpr int StreamMetadata::AnnotationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamMetadata_CoordinateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_session_2eproto);
  return file_level_enum_descriptors_session_2eproto[8];
}
bool StreamMetadata_CoordinateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr StreamMetadata_CoordinateType StreamMetadata::STREAM_METADATA_COORDINATE_TYPE_INVALID;
constexpr StreamMetadata_CoordinateType StreamMetadata::GEOGRAPHIC;
constexpr StreamMetadata_CoordinateType StreamMetadata::IDENTITY;
constexpr StreamMetadata_CoordinateType StreamMetadata::DYNAMIC;
constexpr StreamMetadata_CoordinateType StreamMetadata::VEHICLE_RELATIVE;
constexpr StreamMetadata_CoordinateType StreamMetadata::CoordinateType_MIN;
constexpr StreamMetadata_CoordinateType StreamMetadata::CoordinateType_MAX;
constexpr int StreamMetadata::CoordinateType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SessionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_session_2eproto);
  return file_level_enum_descriptors_session_2eproto[9];
}
bool SessionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Start::_Internal {
 public:
};

Start::Start(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xviz.Start)
}
Start::Start(const Start& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  profile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    profile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_profile().empty()) {
    profile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_profile(), 
      GetArenaForAllocation());
  }
  log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    log_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_log().empty()) {
    log_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_log(), 
      GetArenaForAllocation());
  }
  ::memcpy(&session_type_, &from.session_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&message_format_) -
    reinterpret_cast<char*>(&session_type_)) + sizeof(message_format_));
  // @@protoc_insertion_point(copy_constructor:xviz.Start)
}

inline void Start::SharedCtor() {
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
profile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  profile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  log_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&session_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&message_format_) -
    reinterpret_cast<char*>(&session_type_)) + sizeof(message_format_));
}

Start::~Start() {
  // @@protoc_insertion_point(destructor:xviz.Start)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Start::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Start::ArenaDtor(void* object) {
  Start* _this = reinterpret_cast< Start* >(object);
  (void)_this;
}
void Start::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Start::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Start::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.Start)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmpty();
  profile_.ClearToEmpty();
  log_.ClearToEmpty();
  ::memset(&session_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_format_) -
      reinterpret_cast<char*>(&session_type_)) + sizeof(message_format_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Start::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.Start.version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string profile = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_profile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.Start.profile"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xviz.SessionType session_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_type(static_cast<::xviz::SessionType>(val));
        } else
          goto handle_unusual;
        continue;
      // .xviz.Start.MessageFormat message_format = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_message_format(static_cast<::xviz::Start_MessageFormat>(val));
        } else
          goto handle_unusual;
        continue;
      // string log = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_log();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.Start.log"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Start::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.Start)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.Start.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // string profile = 2;
  if (!this->_internal_profile().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_profile().data(), static_cast<int>(this->_internal_profile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.Start.profile");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_profile(), target);
  }

  // .xviz.SessionType session_type = 3;
  if (this->_internal_session_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_session_type(), target);
  }

  // .xviz.Start.MessageFormat message_format = 4;
  if (this->_internal_message_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_message_format(), target);
  }

  // string log = 5;
  if (!this->_internal_log().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log().data(), static_cast<int>(this->_internal_log().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.Start.log");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_log(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.Start)
  return target;
}

size_t Start::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.Start)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string profile = 2;
  if (!this->_internal_profile().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_profile());
  }

  // string log = 5;
  if (!this->_internal_log().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log());
  }

  // .xviz.SessionType session_type = 3;
  if (this->_internal_session_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_type());
  }

  // .xviz.Start.MessageFormat message_format = 4;
  if (this->_internal_message_format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_message_format());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Start::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Start::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Start::GetClassData() const { return &_class_data_; }

void Start::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Start *>(to)->MergeFrom(
      static_cast<const Start &>(from));
}


void Start::MergeFrom(const Start& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.Start)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  if (!from._internal_profile().empty()) {
    _internal_set_profile(from._internal_profile());
  }
  if (!from._internal_log().empty()) {
    _internal_set_log(from._internal_log());
  }
  if (from._internal_session_type() != 0) {
    _internal_set_session_type(from._internal_session_type());
  }
  if (from._internal_message_format() != 0) {
    _internal_set_message_format(from._internal_message_format());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Start::CopyFrom(const Start& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.Start)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Start::IsInitialized() const {
  return true;
}

void Start::InternalSwap(Start* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &profile_, lhs_arena,
      &other->profile_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &log_, lhs_arena,
      &other->log_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Start, message_format_)
      + sizeof(Start::message_format_)
      - PROTOBUF_FIELD_OFFSET(Start, session_type_)>(
          reinterpret_cast<char*>(&session_type_),
          reinterpret_cast<char*>(&other->session_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Start::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_session_2eproto_getter, &descriptor_table_session_2eproto_once,
      file_level_metadata_session_2eproto[0]);
}

// ===================================================================

class TransformLog::_Internal {
 public:
};

TransformLog::TransformLog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  desired_streams_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xviz.TransformLog)
}
TransformLog::TransformLog(const TransformLog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      desired_streams_(from.desired_streams_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&start_timestamp_, &from.start_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_timestamp_) -
    reinterpret_cast<char*>(&start_timestamp_)) + sizeof(end_timestamp_));
  // @@protoc_insertion_point(copy_constructor:xviz.TransformLog)
}

inline void TransformLog::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_timestamp_) -
    reinterpret_cast<char*>(&start_timestamp_)) + sizeof(end_timestamp_));
}

TransformLog::~TransformLog() {
  // @@protoc_insertion_point(destructor:xviz.TransformLog)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransformLog::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransformLog::ArenaDtor(void* object) {
  TransformLog* _this = reinterpret_cast< TransformLog* >(object);
  (void)_this;
}
void TransformLog::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransformLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransformLog::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.TransformLog)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  desired_streams_.Clear();
  id_.ClearToEmpty();
  ::memset(&start_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_timestamp_) -
      reinterpret_cast<char*>(&start_timestamp_)) + sizeof(end_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransformLog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.TransformLog.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double start_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          start_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double end_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          end_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated string desired_streams = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_desired_streams();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.TransformLog.desired_streams"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransformLog::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.TransformLog)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.TransformLog.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // double start_timestamp = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_start_timestamp = this->_internal_start_timestamp();
  uint64_t raw_start_timestamp;
  memcpy(&raw_start_timestamp, &tmp_start_timestamp, sizeof(tmp_start_timestamp));
  if (raw_start_timestamp != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_start_timestamp(), target);
  }

  // double end_timestamp = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_end_timestamp = this->_internal_end_timestamp();
  uint64_t raw_end_timestamp;
  memcpy(&raw_end_timestamp, &tmp_end_timestamp, sizeof(tmp_end_timestamp));
  if (raw_end_timestamp != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_end_timestamp(), target);
  }

  // repeated string desired_streams = 4;
  for (int i = 0, n = this->_internal_desired_streams_size(); i < n; i++) {
    const auto& s = this->_internal_desired_streams(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.TransformLog.desired_streams");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.TransformLog)
  return target;
}

size_t TransformLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.TransformLog)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string desired_streams = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(desired_streams_.size());
  for (int i = 0, n = desired_streams_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      desired_streams_.Get(i));
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // double start_timestamp = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_start_timestamp = this->_internal_start_timestamp();
  uint64_t raw_start_timestamp;
  memcpy(&raw_start_timestamp, &tmp_start_timestamp, sizeof(tmp_start_timestamp));
  if (raw_start_timestamp != 0) {
    total_size += 1 + 8;
  }

  // double end_timestamp = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_end_timestamp = this->_internal_end_timestamp();
  uint64_t raw_end_timestamp;
  memcpy(&raw_end_timestamp, &tmp_end_timestamp, sizeof(tmp_end_timestamp));
  if (raw_end_timestamp != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransformLog::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransformLog::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransformLog::GetClassData() const { return &_class_data_; }

void TransformLog::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransformLog *>(to)->MergeFrom(
      static_cast<const TransformLog &>(from));
}


void TransformLog::MergeFrom(const TransformLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.TransformLog)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  desired_streams_.MergeFrom(from.desired_streams_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_start_timestamp = from._internal_start_timestamp();
  uint64_t raw_start_timestamp;
  memcpy(&raw_start_timestamp, &tmp_start_timestamp, sizeof(tmp_start_timestamp));
  if (raw_start_timestamp != 0) {
    _internal_set_start_timestamp(from._internal_start_timestamp());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_end_timestamp = from._internal_end_timestamp();
  uint64_t raw_end_timestamp;
  memcpy(&raw_end_timestamp, &tmp_end_timestamp, sizeof(tmp_end_timestamp));
  if (raw_end_timestamp != 0) {
    _internal_set_end_timestamp(from._internal_end_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransformLog::CopyFrom(const TransformLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.TransformLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformLog::IsInitialized() const {
  return true;
}

void TransformLog::InternalSwap(TransformLog* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  desired_streams_.InternalSwap(&other->desired_streams_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransformLog, end_timestamp_)
      + sizeof(TransformLog::end_timestamp_)
      - PROTOBUF_FIELD_OFFSET(TransformLog, start_timestamp_)>(
          reinterpret_cast<char*>(&start_timestamp_),
          reinterpret_cast<char*>(&other->start_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransformLog::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_session_2eproto_getter, &descriptor_table_session_2eproto_once,
      file_level_metadata_session_2eproto[1]);
}

// ===================================================================

class StateUpdate::_Internal {
 public:
};

void StateUpdate::clear_updates() {
  updates_.Clear();
}
StateUpdate::StateUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  updates_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xviz.StateUpdate)
}
StateUpdate::StateUpdate(const StateUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      updates_(from.updates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  update_type_ = from.update_type_;
  // @@protoc_insertion_point(copy_constructor:xviz.StateUpdate)
}

inline void StateUpdate::SharedCtor() {
update_type_ = 0;
}

StateUpdate::~StateUpdate() {
  // @@protoc_insertion_point(destructor:xviz.StateUpdate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StateUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StateUpdate::ArenaDtor(void* object) {
  StateUpdate* _this = reinterpret_cast< StateUpdate* >(object);
  (void)_this;
}
void StateUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StateUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StateUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.StateUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  updates_.Clear();
  update_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StateUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .xviz.StateUpdate.UpdateType update_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_update_type(static_cast<::xviz::StateUpdate_UpdateType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .xviz.StreamSet updates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StateUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.StateUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .xviz.StateUpdate.UpdateType update_type = 1;
  if (this->_internal_update_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_update_type(), target);
  }

  // repeated .xviz.StreamSet updates = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_updates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_updates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.StateUpdate)
  return target;
}

size_t StateUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.StateUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xviz.StreamSet updates = 2;
  total_size += 1UL * this->_internal_updates_size();
  for (const auto& msg : this->updates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .xviz.StateUpdate.UpdateType update_type = 1;
  if (this->_internal_update_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_update_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StateUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StateUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StateUpdate::GetClassData() const { return &_class_data_; }

void StateUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StateUpdate *>(to)->MergeFrom(
      static_cast<const StateUpdate &>(from));
}


void StateUpdate::MergeFrom(const StateUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.StateUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  updates_.MergeFrom(from.updates_);
  if (from._internal_update_type() != 0) {
    _internal_set_update_type(from._internal_update_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StateUpdate::CopyFrom(const StateUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.StateUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateUpdate::IsInitialized() const {
  return true;
}

void StateUpdate::InternalSwap(StateUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  updates_.InternalSwap(&other->updates_);
  swap(update_type_, other->update_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateUpdate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_session_2eproto_getter, &descriptor_table_session_2eproto_once,
      file_level_metadata_session_2eproto[2]);
}

// ===================================================================

class TransformLogDone::_Internal {
 public:
};

TransformLogDone::TransformLogDone(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xviz.TransformLogDone)
}
TransformLogDone::TransformLogDone(const TransformLogDone& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:xviz.TransformLogDone)
}

inline void TransformLogDone::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TransformLogDone::~TransformLogDone() {
  // @@protoc_insertion_point(destructor:xviz.TransformLogDone)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransformLogDone::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransformLogDone::ArenaDtor(void* object) {
  TransformLogDone* _this = reinterpret_cast< TransformLogDone* >(object);
  (void)_this;
}
void TransformLogDone::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransformLogDone::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransformLogDone::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.TransformLogDone)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransformLogDone::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.TransformLogDone.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransformLogDone::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.TransformLogDone)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.TransformLogDone.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.TransformLogDone)
  return target;
}

size_t TransformLogDone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.TransformLogDone)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransformLogDone::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransformLogDone::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransformLogDone::GetClassData() const { return &_class_data_; }

void TransformLogDone::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransformLogDone *>(to)->MergeFrom(
      static_cast<const TransformLogDone &>(from));
}


void TransformLogDone::MergeFrom(const TransformLogDone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.TransformLogDone)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransformLogDone::CopyFrom(const TransformLogDone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.TransformLogDone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformLogDone::IsInitialized() const {
  return true;
}

void TransformLogDone::InternalSwap(TransformLogDone* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TransformLogDone::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_session_2eproto_getter, &descriptor_table_session_2eproto_once,
      file_level_metadata_session_2eproto[3]);
}

// ===================================================================

class TransformPointInTime::_Internal {
 public:
};

TransformPointInTime::TransformPointInTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  desired_streams_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xviz.TransformPointInTime)
}
TransformPointInTime::TransformPointInTime(const TransformPointInTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      desired_streams_(from.desired_streams_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  query_timestamp_ = from.query_timestamp_;
  // @@protoc_insertion_point(copy_constructor:xviz.TransformPointInTime)
}

inline void TransformPointInTime::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
query_timestamp_ = 0;
}

TransformPointInTime::~TransformPointInTime() {
  // @@protoc_insertion_point(destructor:xviz.TransformPointInTime)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransformPointInTime::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransformPointInTime::ArenaDtor(void* object) {
  TransformPointInTime* _this = reinterpret_cast< TransformPointInTime* >(object);
  (void)_this;
}
void TransformPointInTime::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransformPointInTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransformPointInTime::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.TransformPointInTime)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  desired_streams_.Clear();
  id_.ClearToEmpty();
  query_timestamp_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransformPointInTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.TransformPointInTime.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double query_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          query_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated string desired_streams = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_desired_streams();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.TransformPointInTime.desired_streams"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransformPointInTime::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.TransformPointInTime)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.TransformPointInTime.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // double query_timestamp = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_query_timestamp = this->_internal_query_timestamp();
  uint64_t raw_query_timestamp;
  memcpy(&raw_query_timestamp, &tmp_query_timestamp, sizeof(tmp_query_timestamp));
  if (raw_query_timestamp != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_query_timestamp(), target);
  }

  // repeated string desired_streams = 3;
  for (int i = 0, n = this->_internal_desired_streams_size(); i < n; i++) {
    const auto& s = this->_internal_desired_streams(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.TransformPointInTime.desired_streams");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.TransformPointInTime)
  return target;
}

size_t TransformPointInTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.TransformPointInTime)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string desired_streams = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(desired_streams_.size());
  for (int i = 0, n = desired_streams_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      desired_streams_.Get(i));
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // double query_timestamp = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_query_timestamp = this->_internal_query_timestamp();
  uint64_t raw_query_timestamp;
  memcpy(&raw_query_timestamp, &tmp_query_timestamp, sizeof(tmp_query_timestamp));
  if (raw_query_timestamp != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransformPointInTime::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransformPointInTime::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransformPointInTime::GetClassData() const { return &_class_data_; }

void TransformPointInTime::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransformPointInTime *>(to)->MergeFrom(
      static_cast<const TransformPointInTime &>(from));
}


void TransformPointInTime::MergeFrom(const TransformPointInTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.TransformPointInTime)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  desired_streams_.MergeFrom(from.desired_streams_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_query_timestamp = from._internal_query_timestamp();
  uint64_t raw_query_timestamp;
  memcpy(&raw_query_timestamp, &tmp_query_timestamp, sizeof(tmp_query_timestamp));
  if (raw_query_timestamp != 0) {
    _internal_set_query_timestamp(from._internal_query_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransformPointInTime::CopyFrom(const TransformPointInTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.TransformPointInTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformPointInTime::IsInitialized() const {
  return true;
}

void TransformPointInTime::InternalSwap(TransformPointInTime* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  desired_streams_.InternalSwap(&other->desired_streams_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  swap(query_timestamp_, other->query_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransformPointInTime::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_session_2eproto_getter, &descriptor_table_session_2eproto_once,
      file_level_metadata_session_2eproto[4]);
}

// ===================================================================

class Reconfigure::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& config_update(const Reconfigure* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
Reconfigure::_Internal::config_update(const Reconfigure* msg) {
  return *msg->config_update_;
}
void Reconfigure::clear_config_update() {
  if (GetArenaForAllocation() == nullptr && config_update_ != nullptr) {
    delete config_update_;
  }
  config_update_ = nullptr;
}
Reconfigure::Reconfigure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xviz.Reconfigure)
}
Reconfigure::Reconfigure(const Reconfigure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_config_update()) {
    config_update_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.config_update_);
  } else {
    config_update_ = nullptr;
  }
  update_type_ = from.update_type_;
  // @@protoc_insertion_point(copy_constructor:xviz.Reconfigure)
}

inline void Reconfigure::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&config_update_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&update_type_) -
    reinterpret_cast<char*>(&config_update_)) + sizeof(update_type_));
}

Reconfigure::~Reconfigure() {
  // @@protoc_insertion_point(destructor:xviz.Reconfigure)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Reconfigure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete config_update_;
}

void Reconfigure::ArenaDtor(void* object) {
  Reconfigure* _this = reinterpret_cast< Reconfigure* >(object);
  (void)_this;
}
void Reconfigure::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Reconfigure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Reconfigure::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.Reconfigure)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && config_update_ != nullptr) {
    delete config_update_;
  }
  config_update_ = nullptr;
  update_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Reconfigure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .xviz.Reconfigure.UpdateType update_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_update_type(static_cast<::xviz::Reconfigure_UpdateType>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct config_update = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_config_update(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Reconfigure::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.Reconfigure)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .xviz.Reconfigure.UpdateType update_type = 1;
  if (this->_internal_update_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_update_type(), target);
  }

  // .google.protobuf.Struct config_update = 2;
  if (this->_internal_has_config_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::config_update(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.Reconfigure)
  return target;
}

size_t Reconfigure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.Reconfigure)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Struct config_update = 2;
  if (this->_internal_has_config_update()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_update_);
  }

  // .xviz.Reconfigure.UpdateType update_type = 1;
  if (this->_internal_update_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_update_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Reconfigure::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Reconfigure::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Reconfigure::GetClassData() const { return &_class_data_; }

void Reconfigure::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Reconfigure *>(to)->MergeFrom(
      static_cast<const Reconfigure &>(from));
}


void Reconfigure::MergeFrom(const Reconfigure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.Reconfigure)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_config_update()) {
    _internal_mutable_config_update()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_config_update());
  }
  if (from._internal_update_type() != 0) {
    _internal_set_update_type(from._internal_update_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Reconfigure::CopyFrom(const Reconfigure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.Reconfigure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reconfigure::IsInitialized() const {
  return true;
}

void Reconfigure::InternalSwap(Reconfigure* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Reconfigure, update_type_)
      + sizeof(Reconfigure::update_type_)
      - PROTOBUF_FIELD_OFFSET(Reconfigure, config_update_)>(
          reinterpret_cast<char*>(&config_update_),
          reinterpret_cast<char*>(&other->config_update_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Reconfigure::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_session_2eproto_getter, &descriptor_table_session_2eproto_once,
      file_level_metadata_session_2eproto[5]);
}

// ===================================================================

Metadata_StreamsEntry_DoNotUse::Metadata_StreamsEntry_DoNotUse() {}
Metadata_StreamsEntry_DoNotUse::Metadata_StreamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Metadata_StreamsEntry_DoNotUse::MergeFrom(const Metadata_StreamsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Metadata_StreamsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_session_2eproto_getter, &descriptor_table_session_2eproto_once,
      file_level_metadata_session_2eproto[6]);
}

// ===================================================================

Metadata_CamerasEntry_DoNotUse::Metadata_CamerasEntry_DoNotUse() {}
Metadata_CamerasEntry_DoNotUse::Metadata_CamerasEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Metadata_CamerasEntry_DoNotUse::MergeFrom(const Metadata_CamerasEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Metadata_CamerasEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_session_2eproto_getter, &descriptor_table_session_2eproto_once,
      file_level_metadata_session_2eproto[7]);
}

// ===================================================================

Metadata_StreamAliasesEntry_DoNotUse::Metadata_StreamAliasesEntry_DoNotUse() {}
Metadata_StreamAliasesEntry_DoNotUse::Metadata_StreamAliasesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Metadata_StreamAliasesEntry_DoNotUse::MergeFrom(const Metadata_StreamAliasesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Metadata_StreamAliasesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_session_2eproto_getter, &descriptor_table_session_2eproto_once,
      file_level_metadata_session_2eproto[8]);
}

// ===================================================================

Metadata_UiConfigEntry_DoNotUse::Metadata_UiConfigEntry_DoNotUse() {}
Metadata_UiConfigEntry_DoNotUse::Metadata_UiConfigEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Metadata_UiConfigEntry_DoNotUse::MergeFrom(const Metadata_UiConfigEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Metadata_UiConfigEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_session_2eproto_getter, &descriptor_table_session_2eproto_once,
      file_level_metadata_session_2eproto[9]);
}

// ===================================================================

class Metadata::_Internal {
 public:
  static const ::xviz::LogInfo& log_info(const Metadata* msg);
};

const ::xviz::LogInfo&
Metadata::_Internal::log_info(const Metadata* msg) {
  return *msg->log_info_;
}
Metadata::Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  streams_(arena),
  cameras_(arena),
  stream_aliases_(arena),
  ui_config_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xviz.Metadata)
}
Metadata::Metadata(const Metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  streams_.MergeFrom(from.streams_);
  cameras_.MergeFrom(from.cameras_);
  stream_aliases_.MergeFrom(from.stream_aliases_);
  ui_config_.MergeFrom(from.ui_config_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_log_info()) {
    log_info_ = new ::xviz::LogInfo(*from.log_info_);
  } else {
    log_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:xviz.Metadata)
}

inline void Metadata::SharedCtor() {
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
log_info_ = nullptr;
}

Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:xviz.Metadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Metadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete log_info_;
}

void Metadata::ArenaDtor(void* object) {
  Metadata* _this = reinterpret_cast< Metadata* >(object);
  (void)_this;
  _this->streams_. ~MapField();
  _this->cameras_. ~MapField();
  _this->stream_aliases_. ~MapField();
  _this->ui_config_. ~MapField();
}
inline void Metadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Metadata::ArenaDtor);
  }
}
void Metadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.Metadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  streams_.Clear();
  cameras_.Clear();
  stream_aliases_.Clear();
  ui_config_.Clear();
  version_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && log_info_ != nullptr) {
    delete log_info_;
  }
  log_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.Metadata.version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .xviz.StreamMetadata> streams = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&streams_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .xviz.CameraInfo> cameras = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&cameras_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> stream_aliases = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&stream_aliases_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .xviz.UIPanelInfo> ui_config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&ui_config_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .xviz.LogInfo log_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_log_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Metadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.Metadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.Metadata.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // map<string, .xviz.StreamMetadata> streams = 2;
  if (!this->_internal_streams().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::StreamMetadata >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "xviz.Metadata.StreamsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_streams().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_streams().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::StreamMetadata >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::StreamMetadata >::const_iterator
          it = this->_internal_streams().begin();
          it != this->_internal_streams().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Metadata_StreamsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::StreamMetadata >::const_iterator
          it = this->_internal_streams().begin();
          it != this->_internal_streams().end(); ++it) {
        target = Metadata_StreamsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .xviz.CameraInfo> cameras = 3;
  if (!this->_internal_cameras().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::CameraInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "xviz.Metadata.CamerasEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_cameras().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_cameras().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::CameraInfo >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::CameraInfo >::const_iterator
          it = this->_internal_cameras().begin();
          it != this->_internal_cameras().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Metadata_CamerasEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::CameraInfo >::const_iterator
          it = this->_internal_cameras().begin();
          it != this->_internal_cameras().end(); ++it) {
        target = Metadata_CamerasEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> stream_aliases = 4;
  if (!this->_internal_stream_aliases().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "xviz.Metadata.StreamAliasesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "xviz.Metadata.StreamAliasesEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_stream_aliases().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_stream_aliases().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_stream_aliases().begin();
          it != this->_internal_stream_aliases().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Metadata_StreamAliasesEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_stream_aliases().begin();
          it != this->_internal_stream_aliases().end(); ++it) {
        target = Metadata_StreamAliasesEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .xviz.UIPanelInfo> ui_config = 5;
  if (!this->_internal_ui_config().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::UIPanelInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "xviz.Metadata.UiConfigEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_ui_config().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_ui_config().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::UIPanelInfo >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::UIPanelInfo >::const_iterator
          it = this->_internal_ui_config().begin();
          it != this->_internal_ui_config().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Metadata_UiConfigEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::UIPanelInfo >::const_iterator
          it = this->_internal_ui_config().begin();
          it != this->_internal_ui_config().end(); ++it) {
        target = Metadata_UiConfigEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .xviz.LogInfo log_info = 6;
  if (this->_internal_has_log_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::log_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.Metadata)
  return target;
}

size_t Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.Metadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .xviz.StreamMetadata> streams = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_streams_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::StreamMetadata >::const_iterator
      it = this->_internal_streams().begin();
      it != this->_internal_streams().end(); ++it) {
    total_size += Metadata_StreamsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .xviz.CameraInfo> cameras = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cameras_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::CameraInfo >::const_iterator
      it = this->_internal_cameras().begin();
      it != this->_internal_cameras().end(); ++it) {
    total_size += Metadata_CamerasEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> stream_aliases = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_stream_aliases_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_stream_aliases().begin();
      it != this->_internal_stream_aliases().end(); ++it) {
    total_size += Metadata_StreamAliasesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .xviz.UIPanelInfo> ui_config = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ui_config_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::UIPanelInfo >::const_iterator
      it = this->_internal_ui_config().begin();
      it != this->_internal_ui_config().end(); ++it) {
    total_size += Metadata_UiConfigEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // .xviz.LogInfo log_info = 6;
  if (this->_internal_has_log_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *log_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Metadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Metadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Metadata::GetClassData() const { return &_class_data_; }

void Metadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Metadata *>(to)->MergeFrom(
      static_cast<const Metadata &>(from));
}


void Metadata::MergeFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  streams_.MergeFrom(from.streams_);
  cameras_.MergeFrom(from.cameras_);
  stream_aliases_.MergeFrom(from.stream_aliases_);
  ui_config_.MergeFrom(from.ui_config_);
  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  if (from._internal_has_log_info()) {
    _internal_mutable_log_info()->::xviz::LogInfo::MergeFrom(from._internal_log_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Metadata::CopyFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {
  return true;
}

void Metadata::InternalSwap(Metadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  streams_.InternalSwap(&other->streams_);
  cameras_.InternalSwap(&other->cameras_);
  stream_aliases_.InternalSwap(&other->stream_aliases_);
  ui_config_.InternalSwap(&other->ui_config_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
  swap(log_info_, other->log_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Metadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_session_2eproto_getter, &descriptor_table_session_2eproto_once,
      file_level_metadata_session_2eproto[10]);
}

// ===================================================================

class Error::_Internal {
 public:
};

Error::Error(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xviz.Error)
}
Error::Error(const Error& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:xviz.Error)
}

inline void Error::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:xviz.Error)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Error::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Error::ArenaDtor(void* object) {
  Error* _this = reinterpret_cast< Error* >(object);
  (void)_this;
}
void Error::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Error::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.Error)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Error::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.Error.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Error::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.Error)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.Error.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.Error)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Error::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Error::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Error::GetClassData() const { return &_class_data_; }

void Error::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Error *>(to)->MergeFrom(
      static_cast<const Error &>(from));
}


void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.Error)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  return true;
}

void Error::InternalSwap(Error* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Error::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_session_2eproto_getter, &descriptor_table_session_2eproto_once,
      file_level_metadata_session_2eproto[11]);
}

// ===================================================================

class StreamMetadata::_Internal {
 public:
  static const ::xviz::StyleStreamValue& stream_style(const StreamMetadata* msg);
};

const ::xviz::StyleStreamValue&
StreamMetadata::_Internal::stream_style(const StreamMetadata* msg) {
  return *msg->stream_style_;
}
void StreamMetadata::clear_stream_style() {
  if (GetArenaForAllocation() == nullptr && stream_style_ != nullptr) {
    delete stream_style_;
  }
  stream_style_ = nullptr;
}
void StreamMetadata::clear_style_classes() {
  style_classes_.Clear();
}
StreamMetadata::StreamMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  style_classes_(arena),
  transform_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xviz.StreamMetadata)
}
StreamMetadata::StreamMetadata(const StreamMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      style_classes_(from.style_classes_),
      transform_(from.transform_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source().empty()) {
    source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_source(), 
      GetArenaForAllocation());
  }
  units_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_units().empty()) {
    units_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_units(), 
      GetArenaForAllocation());
  }
  transform_callback_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    transform_callback_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transform_callback().empty()) {
    transform_callback_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transform_callback(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_stream_style()) {
    stream_style_ = new ::xviz::StyleStreamValue(*from.stream_style_);
  } else {
    stream_style_ = nullptr;
  }
  ::memcpy(&category_, &from.category_,
    static_cast<size_t>(reinterpret_cast<char*>(&coordinate_) -
    reinterpret_cast<char*>(&category_)) + sizeof(coordinate_));
  // @@protoc_insertion_point(copy_constructor:xviz.StreamMetadata)
}

inline void StreamMetadata::SharedCtor() {
source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
units_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
transform_callback_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  transform_callback_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stream_style_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&coordinate_) -
    reinterpret_cast<char*>(&stream_style_)) + sizeof(coordinate_));
}

StreamMetadata::~StreamMetadata() {
  // @@protoc_insertion_point(destructor:xviz.StreamMetadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  units_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transform_callback_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stream_style_;
}

void StreamMetadata::ArenaDtor(void* object) {
  StreamMetadata* _this = reinterpret_cast< StreamMetadata* >(object);
  (void)_this;
}
void StreamMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.StreamMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  style_classes_.Clear();
  transform_.Clear();
  source_.ClearToEmpty();
  units_.ClearToEmpty();
  transform_callback_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && stream_style_ != nullptr) {
    delete stream_style_;
  }
  stream_style_ = nullptr;
  ::memset(&category_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&coordinate_) -
      reinterpret_cast<char*>(&category_)) + sizeof(coordinate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.StreamMetadata.source"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string units = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_units();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.StreamMetadata.units"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xviz.StreamMetadata.Category category = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_category(static_cast<::xviz::StreamMetadata_Category>(val));
        } else
          goto handle_unusual;
        continue;
      // .xviz.StreamMetadata.ScalarType scalar_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_scalar_type(static_cast<::xviz::StreamMetadata_ScalarType>(val));
        } else
          goto handle_unusual;
        continue;
      // .xviz.StreamMetadata.PrimitiveType primitive_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_primitive_type(static_cast<::xviz::StreamMetadata_PrimitiveType>(val));
        } else
          goto handle_unusual;
        continue;
      // .xviz.StreamMetadata.UIPrimitiveType ui_primitive_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ui_primitive_type(static_cast<::xviz::StreamMetadata_UIPrimitiveType>(val));
        } else
          goto handle_unusual;
        continue;
      // .xviz.StreamMetadata.AnnotationType annotation_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_annotation_type(static_cast<::xviz::StreamMetadata_AnnotationType>(val));
        } else
          goto handle_unusual;
        continue;
      // .xviz.StyleStreamValue stream_style = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xviz.StyleClass style_classes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_style_classes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .xviz.StreamMetadata.CoordinateType coordinate = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_coordinate(static_cast<::xviz::StreamMetadata_CoordinateType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated double transform = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_transform(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 89) {
          _internal_add_transform(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string transform_callback = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_transform_callback();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.StreamMetadata.transform_callback"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.StreamMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string source = 1;
  if (!this->_internal_source().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.StreamMetadata.source");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source(), target);
  }

  // string units = 2;
  if (!this->_internal_units().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_units().data(), static_cast<int>(this->_internal_units().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.StreamMetadata.units");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_units(), target);
  }

  // .xviz.StreamMetadata.Category category = 3;
  if (this->_internal_category() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_category(), target);
  }

  // .xviz.StreamMetadata.ScalarType scalar_type = 4;
  if (this->_internal_scalar_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_scalar_type(), target);
  }

  // .xviz.StreamMetadata.PrimitiveType primitive_type = 5;
  if (this->_internal_primitive_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_primitive_type(), target);
  }

  // .xviz.StreamMetadata.UIPrimitiveType ui_primitive_type = 6;
  if (this->_internal_ui_primitive_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_ui_primitive_type(), target);
  }

  // .xviz.StreamMetadata.AnnotationType annotation_type = 7;
  if (this->_internal_annotation_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_annotation_type(), target);
  }

  // .xviz.StyleStreamValue stream_style = 8;
  if (this->_internal_has_stream_style()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::stream_style(this), target, stream);
  }

  // repeated .xviz.StyleClass style_classes = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_style_classes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_style_classes(i), target, stream);
  }

  // .xviz.StreamMetadata.CoordinateType coordinate = 10;
  if (this->_internal_coordinate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_coordinate(), target);
  }

  // repeated double transform = 11;
  if (this->_internal_transform_size() > 0) {
    target = stream->WriteFixedPacked(11, _internal_transform(), target);
  }

  // string transform_callback = 12;
  if (!this->_internal_transform_callback().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transform_callback().data(), static_cast<int>(this->_internal_transform_callback().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.StreamMetadata.transform_callback");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_transform_callback(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.StreamMetadata)
  return target;
}

size_t StreamMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.StreamMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xviz.StyleClass style_classes = 9;
  total_size += 1UL * this->_internal_style_classes_size();
  for (const auto& msg : this->style_classes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated double transform = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_transform_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string source = 1;
  if (!this->_internal_source().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source());
  }

  // string units = 2;
  if (!this->_internal_units().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_units());
  }

  // string transform_callback = 12;
  if (!this->_internal_transform_callback().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transform_callback());
  }

  // .xviz.StyleStreamValue stream_style = 8;
  if (this->_internal_has_stream_style()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stream_style_);
  }

  // .xviz.StreamMetadata.Category category = 3;
  if (this->_internal_category() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_category());
  }

  // .xviz.StreamMetadata.ScalarType scalar_type = 4;
  if (this->_internal_scalar_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scalar_type());
  }

  // .xviz.StreamMetadata.PrimitiveType primitive_type = 5;
  if (this->_internal_primitive_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_primitive_type());
  }

  // .xviz.StreamMetadata.UIPrimitiveType ui_primitive_type = 6;
  if (this->_internal_ui_primitive_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ui_primitive_type());
  }

  // .xviz.StreamMetadata.AnnotationType annotation_type = 7;
  if (this->_internal_annotation_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_annotation_type());
  }

  // .xviz.StreamMetadata.CoordinateType coordinate = 10;
  if (this->_internal_coordinate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_coordinate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamMetadata::GetClassData() const { return &_class_data_; }

void StreamMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StreamMetadata *>(to)->MergeFrom(
      static_cast<const StreamMetadata &>(from));
}


void StreamMetadata::MergeFrom(const StreamMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.StreamMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  style_classes_.MergeFrom(from.style_classes_);
  transform_.MergeFrom(from.transform_);
  if (!from._internal_source().empty()) {
    _internal_set_source(from._internal_source());
  }
  if (!from._internal_units().empty()) {
    _internal_set_units(from._internal_units());
  }
  if (!from._internal_transform_callback().empty()) {
    _internal_set_transform_callback(from._internal_transform_callback());
  }
  if (from._internal_has_stream_style()) {
    _internal_mutable_stream_style()->::xviz::StyleStreamValue::MergeFrom(from._internal_stream_style());
  }
  if (from._internal_category() != 0) {
    _internal_set_category(from._internal_category());
  }
  if (from._internal_scalar_type() != 0) {
    _internal_set_scalar_type(from._internal_scalar_type());
  }
  if (from._internal_primitive_type() != 0) {
    _internal_set_primitive_type(from._internal_primitive_type());
  }
  if (from._internal_ui_primitive_type() != 0) {
    _internal_set_ui_primitive_type(from._internal_ui_primitive_type());
  }
  if (from._internal_annotation_type() != 0) {
    _internal_set_annotation_type(from._internal_annotation_type());
  }
  if (from._internal_coordinate() != 0) {
    _internal_set_coordinate(from._internal_coordinate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamMetadata::CopyFrom(const StreamMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.StreamMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamMetadata::IsInitialized() const {
  return true;
}

void StreamMetadata::InternalSwap(StreamMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  style_classes_.InternalSwap(&other->style_classes_);
  transform_.InternalSwap(&other->transform_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &source_, lhs_arena,
      &other->source_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &units_, lhs_arena,
      &other->units_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transform_callback_, lhs_arena,
      &other->transform_callback_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamMetadata, coordinate_)
      + sizeof(StreamMetadata::coordinate_)
      - PROTOBUF_FIELD_OFFSET(StreamMetadata, stream_style_)>(
          reinterpret_cast<char*>(&stream_style_),
          reinterpret_cast<char*>(&other->stream_style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_session_2eproto_getter, &descriptor_table_session_2eproto_once,
      file_level_metadata_session_2eproto[12]);
}

// ===================================================================

class CameraInfo::_Internal {
 public:
};

CameraInfo::CameraInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vehicle_position_(arena),
  vehicle_orientation_(arena),
  rectification_projection_(arena),
  gl_projection_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xviz.CameraInfo)
}
CameraInfo::CameraInfo(const CameraInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vehicle_position_(from.vehicle_position_),
      vehicle_orientation_(from.vehicle_orientation_),
      rectification_projection_(from.rectification_projection_),
      gl_projection_(from.gl_projection_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  human_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    human_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_human_name().empty()) {
    human_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_human_name(), 
      GetArenaForAllocation());
  }
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source().empty()) {
    source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_source(), 
      GetArenaForAllocation());
  }
  ::memcpy(&pixel_width_, &from.pixel_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&pixel_height_) -
    reinterpret_cast<char*>(&pixel_width_)) + sizeof(pixel_height_));
  // @@protoc_insertion_point(copy_constructor:xviz.CameraInfo)
}

inline void CameraInfo::SharedCtor() {
human_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  human_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pixel_width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pixel_height_) -
    reinterpret_cast<char*>(&pixel_width_)) + sizeof(pixel_height_));
}

CameraInfo::~CameraInfo() {
  // @@protoc_insertion_point(destructor:xviz.CameraInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CameraInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  human_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CameraInfo::ArenaDtor(void* object) {
  CameraInfo* _this = reinterpret_cast< CameraInfo* >(object);
  (void)_this;
}
void CameraInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CameraInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.CameraInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vehicle_position_.Clear();
  vehicle_orientation_.Clear();
  rectification_projection_.Clear();
  gl_projection_.Clear();
  human_name_.ClearToEmpty();
  source_.ClearToEmpty();
  ::memset(&pixel_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pixel_height_) -
      reinterpret_cast<char*>(&pixel_width_)) + sizeof(pixel_height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string human_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_human_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.CameraInfo.human_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.CameraInfo.source"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double vehicle_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_vehicle_position(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 25) {
          _internal_add_vehicle_position(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double vehicle_orientation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_vehicle_orientation(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 33) {
          _internal_add_vehicle_orientation(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double pixel_width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          pixel_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double pixel_height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          pixel_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double rectification_projection = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_rectification_projection(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 57) {
          _internal_add_rectification_projection(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double gl_projection = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_gl_projection(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 65) {
          _internal_add_gl_projection(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CameraInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.CameraInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string human_name = 1;
  if (!this->_internal_human_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_human_name().data(), static_cast<int>(this->_internal_human_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.CameraInfo.human_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_human_name(), target);
  }

  // string source = 2;
  if (!this->_internal_source().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.CameraInfo.source");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source(), target);
  }

  // repeated double vehicle_position = 3;
  if (this->_internal_vehicle_position_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_vehicle_position(), target);
  }

  // repeated double vehicle_orientation = 4;
  if (this->_internal_vehicle_orientation_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_vehicle_orientation(), target);
  }

  // double pixel_width = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pixel_width = this->_internal_pixel_width();
  uint64_t raw_pixel_width;
  memcpy(&raw_pixel_width, &tmp_pixel_width, sizeof(tmp_pixel_width));
  if (raw_pixel_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_pixel_width(), target);
  }

  // double pixel_height = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pixel_height = this->_internal_pixel_height();
  uint64_t raw_pixel_height;
  memcpy(&raw_pixel_height, &tmp_pixel_height, sizeof(tmp_pixel_height));
  if (raw_pixel_height != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_pixel_height(), target);
  }

  // repeated double rectification_projection = 7;
  if (this->_internal_rectification_projection_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_rectification_projection(), target);
  }

  // repeated double gl_projection = 8;
  if (this->_internal_gl_projection_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_gl_projection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.CameraInfo)
  return target;
}

size_t CameraInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.CameraInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double vehicle_position = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vehicle_position_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double vehicle_orientation = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vehicle_orientation_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double rectification_projection = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rectification_projection_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double gl_projection = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_gl_projection_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string human_name = 1;
  if (!this->_internal_human_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_human_name());
  }

  // string source = 2;
  if (!this->_internal_source().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source());
  }

  // double pixel_width = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pixel_width = this->_internal_pixel_width();
  uint64_t raw_pixel_width;
  memcpy(&raw_pixel_width, &tmp_pixel_width, sizeof(tmp_pixel_width));
  if (raw_pixel_width != 0) {
    total_size += 1 + 8;
  }

  // double pixel_height = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pixel_height = this->_internal_pixel_height();
  uint64_t raw_pixel_height;
  memcpy(&raw_pixel_height, &tmp_pixel_height, sizeof(tmp_pixel_height));
  if (raw_pixel_height != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CameraInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CameraInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CameraInfo::GetClassData() const { return &_class_data_; }

void CameraInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CameraInfo *>(to)->MergeFrom(
      static_cast<const CameraInfo &>(from));
}


void CameraInfo::MergeFrom(const CameraInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.CameraInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  vehicle_position_.MergeFrom(from.vehicle_position_);
  vehicle_orientation_.MergeFrom(from.vehicle_orientation_);
  rectification_projection_.MergeFrom(from.rectification_projection_);
  gl_projection_.MergeFrom(from.gl_projection_);
  if (!from._internal_human_name().empty()) {
    _internal_set_human_name(from._internal_human_name());
  }
  if (!from._internal_source().empty()) {
    _internal_set_source(from._internal_source());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pixel_width = from._internal_pixel_width();
  uint64_t raw_pixel_width;
  memcpy(&raw_pixel_width, &tmp_pixel_width, sizeof(tmp_pixel_width));
  if (raw_pixel_width != 0) {
    _internal_set_pixel_width(from._internal_pixel_width());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pixel_height = from._internal_pixel_height();
  uint64_t raw_pixel_height;
  memcpy(&raw_pixel_height, &tmp_pixel_height, sizeof(tmp_pixel_height));
  if (raw_pixel_height != 0) {
    _internal_set_pixel_height(from._internal_pixel_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CameraInfo::CopyFrom(const CameraInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.CameraInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraInfo::IsInitialized() const {
  return true;
}

void CameraInfo::InternalSwap(CameraInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vehicle_position_.InternalSwap(&other->vehicle_position_);
  vehicle_orientation_.InternalSwap(&other->vehicle_orientation_);
  rectification_projection_.InternalSwap(&other->rectification_projection_);
  gl_projection_.InternalSwap(&other->gl_projection_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &human_name_, lhs_arena,
      &other->human_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &source_, lhs_arena,
      &other->source_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraInfo, pixel_height_)
      + sizeof(CameraInfo::pixel_height_)
      - PROTOBUF_FIELD_OFFSET(CameraInfo, pixel_width_)>(
          reinterpret_cast<char*>(&pixel_width_),
          reinterpret_cast<char*>(&other->pixel_width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_session_2eproto_getter, &descriptor_table_session_2eproto_once,
      file_level_metadata_session_2eproto[13]);
}

// ===================================================================

class UIPanelInfo::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& config(const UIPanelInfo* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
UIPanelInfo::_Internal::config(const UIPanelInfo* msg) {
  return *msg->config_;
}
void UIPanelInfo::clear_config() {
  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
UIPanelInfo::UIPanelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  needed_streams_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xviz.UIPanelInfo)
}
UIPanelInfo::UIPanelInfo(const UIPanelInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      needed_streams_(from.needed_streams_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_config()) {
    config_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.config_);
  } else {
    config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:xviz.UIPanelInfo)
}

inline void UIPanelInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
config_ = nullptr;
}

UIPanelInfo::~UIPanelInfo() {
  // @@protoc_insertion_point(destructor:xviz.UIPanelInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UIPanelInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete config_;
}

void UIPanelInfo::ArenaDtor(void* object) {
  UIPanelInfo* _this = reinterpret_cast< UIPanelInfo* >(object);
  (void)_this;
}
void UIPanelInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UIPanelInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UIPanelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.UIPanelInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  needed_streams_.Clear();
  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UIPanelInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.UIPanelInfo.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string needed_streams = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_needed_streams();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.UIPanelInfo.needed_streams"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UIPanelInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.UIPanelInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.UIPanelInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated string needed_streams = 2;
  for (int i = 0, n = this->_internal_needed_streams_size(); i < n; i++) {
    const auto& s = this->_internal_needed_streams(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.UIPanelInfo.needed_streams");
    target = stream->WriteString(2, s, target);
  }

  // .google.protobuf.Struct config = 3;
  if (this->_internal_has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.UIPanelInfo)
  return target;
}

size_t UIPanelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.UIPanelInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string needed_streams = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(needed_streams_.size());
  for (int i = 0, n = needed_streams_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      needed_streams_.Get(i));
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Struct config = 3;
  if (this->_internal_has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UIPanelInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UIPanelInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UIPanelInfo::GetClassData() const { return &_class_data_; }

void UIPanelInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UIPanelInfo *>(to)->MergeFrom(
      static_cast<const UIPanelInfo &>(from));
}


void UIPanelInfo::MergeFrom(const UIPanelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.UIPanelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  needed_streams_.MergeFrom(from.needed_streams_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_config()) {
    _internal_mutable_config()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_config());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UIPanelInfo::CopyFrom(const UIPanelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.UIPanelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIPanelInfo::IsInitialized() const {
  return true;
}

void UIPanelInfo::InternalSwap(UIPanelInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  needed_streams_.InternalSwap(&other->needed_streams_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(config_, other->config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UIPanelInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_session_2eproto_getter, &descriptor_table_session_2eproto_once,
      file_level_metadata_session_2eproto[14]);
}

// ===================================================================

class LogInfo::_Internal {
 public:
};

LogInfo::LogInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xviz.LogInfo)
}
LogInfo::LogInfo(const LogInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_time_, &from.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:xviz.LogInfo)
}

inline void LogInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
}

LogInfo::~LogInfo() {
  // @@protoc_insertion_point(destructor:xviz.LogInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LogInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LogInfo::ArenaDtor(void* object) {
  LogInfo* _this = reinterpret_cast< LogInfo* >(object);
  (void)_this;
}
void LogInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.LogInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double start_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double end_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.LogInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double start_time = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_start_time = this->_internal_start_time();
  uint64_t raw_start_time;
  memcpy(&raw_start_time, &tmp_start_time, sizeof(tmp_start_time));
  if (raw_start_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_start_time(), target);
  }

  // double end_time = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_end_time = this->_internal_end_time();
  uint64_t raw_end_time;
  memcpy(&raw_end_time, &tmp_end_time, sizeof(tmp_end_time));
  if (raw_end_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_end_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.LogInfo)
  return target;
}

size_t LogInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.LogInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double start_time = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_start_time = this->_internal_start_time();
  uint64_t raw_start_time;
  memcpy(&raw_start_time, &tmp_start_time, sizeof(tmp_start_time));
  if (raw_start_time != 0) {
    total_size += 1 + 8;
  }

  // double end_time = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_end_time = this->_internal_end_time();
  uint64_t raw_end_time;
  memcpy(&raw_end_time, &tmp_end_time, sizeof(tmp_end_time));
  if (raw_end_time != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LogInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogInfo::GetClassData() const { return &_class_data_; }

void LogInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LogInfo *>(to)->MergeFrom(
      static_cast<const LogInfo &>(from));
}


void LogInfo::MergeFrom(const LogInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.LogInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_start_time = from._internal_start_time();
  uint64_t raw_start_time;
  memcpy(&raw_start_time, &tmp_start_time, sizeof(tmp_start_time));
  if (raw_start_time != 0) {
    _internal_set_start_time(from._internal_start_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_end_time = from._internal_end_time();
  uint64_t raw_end_time;
  memcpy(&raw_end_time, &tmp_end_time, sizeof(tmp_end_time));
  if (raw_end_time != 0) {
    _internal_set_end_time(from._internal_end_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogInfo::CopyFrom(const LogInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.LogInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogInfo::IsInitialized() const {
  return true;
}

void LogInfo::InternalSwap(LogInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogInfo, end_time_)
      + sizeof(LogInfo::end_time_)
      - PROTOBUF_FIELD_OFFSET(LogInfo, start_time_)>(
          reinterpret_cast<char*>(&start_time_),
          reinterpret_cast<char*>(&other->start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_session_2eproto_getter, &descriptor_table_session_2eproto_once,
      file_level_metadata_session_2eproto[15]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace xviz
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xviz::Start* Arena::CreateMaybeMessage< ::xviz::Start >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::Start >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::TransformLog* Arena::CreateMaybeMessage< ::xviz::TransformLog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::TransformLog >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::StateUpdate* Arena::CreateMaybeMessage< ::xviz::StateUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::StateUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::TransformLogDone* Arena::CreateMaybeMessage< ::xviz::TransformLogDone >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::TransformLogDone >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::TransformPointInTime* Arena::CreateMaybeMessage< ::xviz::TransformPointInTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::TransformPointInTime >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::Reconfigure* Arena::CreateMaybeMessage< ::xviz::Reconfigure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::Reconfigure >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::Metadata_StreamsEntry_DoNotUse* Arena::CreateMaybeMessage< ::xviz::Metadata_StreamsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::Metadata_StreamsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::Metadata_CamerasEntry_DoNotUse* Arena::CreateMaybeMessage< ::xviz::Metadata_CamerasEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::Metadata_CamerasEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::Metadata_StreamAliasesEntry_DoNotUse* Arena::CreateMaybeMessage< ::xviz::Metadata_StreamAliasesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::Metadata_StreamAliasesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::Metadata_UiConfigEntry_DoNotUse* Arena::CreateMaybeMessage< ::xviz::Metadata_UiConfigEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::Metadata_UiConfigEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::Metadata* Arena::CreateMaybeMessage< ::xviz::Metadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::Metadata >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::Error* Arena::CreateMaybeMessage< ::xviz::Error >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::Error >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::StreamMetadata* Arena::CreateMaybeMessage< ::xviz::StreamMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::StreamMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::CameraInfo* Arena::CreateMaybeMessage< ::xviz::CameraInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::CameraInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::UIPanelInfo* Arena::CreateMaybeMessage< ::xviz::UIPanelInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::UIPanelInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::LogInfo* Arena::CreateMaybeMessage< ::xviz::LogInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::LogInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
