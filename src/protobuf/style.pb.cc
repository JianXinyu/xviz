// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: style.proto

#include "protobuf/style.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace xviz {
constexpr StyleClass::StyleClass(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , style_(nullptr){}
struct StyleClassDefaultTypeInternal {
  constexpr StyleClassDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StyleClassDefaultTypeInternal() {}
  union {
    StyleClass _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StyleClassDefaultTypeInternal _StyleClass_default_instance_;
constexpr StyleObjectValue::StyleObjectValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fill_color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stroke_color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stroke_width_(0)
  , radius_(0)
  , text_size_(0)
  , text_rotation_(0)
  , text_anchor_(0)

  , text_baseline_(0)

  , height_(0){}
struct StyleObjectValueDefaultTypeInternal {
  constexpr StyleObjectValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StyleObjectValueDefaultTypeInternal() {}
  union {
    StyleObjectValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StyleObjectValueDefaultTypeInternal _StyleObjectValue_default_instance_;
constexpr StyleStreamValue::StyleStreamValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : point_color_domain_()
  , fill_color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stroke_color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , font_family_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stroke_width_(0)
  , radius_(0)
  , text_size_(0)
  , text_rotation_(0)
  , text_anchor_(0)

  , text_baseline_(0)

  , height_(0)
  , radius_min_pixels_(0u)
  , radius_max_pixels_(0u)
  , stroke_width_min_pixels_(0u)
  , stroke_width_max_pixels_(0u)
  , opacity_(0)
  , stroked_(false)
  , filled_(false)
  , extruded_(false)
  , radius_pixels_(0u)
  , font_weight_(0u)
  , point_color_mode_(0)
{}
struct StyleStreamValueDefaultTypeInternal {
  constexpr StyleStreamValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StyleStreamValueDefaultTypeInternal() {}
  union {
    StyleStreamValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StyleStreamValueDefaultTypeInternal _StyleStreamValue_default_instance_;
constexpr Color::Color(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ColorDefaultTypeInternal {
  constexpr ColorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColorDefaultTypeInternal() {}
  union {
    Color _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColorDefaultTypeInternal _Color_default_instance_;
}  // namespace xviz
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_style_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_style_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_style_2eproto = nullptr;

const uint32_t TableStruct_style_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::StyleClass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::StyleClass, name_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleClass, style_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::StyleObjectValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::StyleObjectValue, fill_color_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleObjectValue, stroke_color_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleObjectValue, stroke_width_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleObjectValue, radius_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleObjectValue, text_size_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleObjectValue, text_rotation_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleObjectValue, text_anchor_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleObjectValue, text_baseline_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleObjectValue, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, fill_color_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, stroke_color_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, stroke_width_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, radius_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, text_size_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, text_rotation_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, text_anchor_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, text_baseline_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, height_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, radius_min_pixels_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, radius_max_pixels_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, stroke_width_min_pixels_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, stroke_width_max_pixels_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, opacity_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, stroked_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, filled_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, extruded_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, radius_pixels_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, font_weight_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, font_family_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, point_color_mode_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, point_color_domain_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::Color, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::Color, values_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::xviz::StyleClass)},
  { 8, -1, -1, sizeof(::xviz::StyleObjectValue)},
  { 23, -1, -1, sizeof(::xviz::StyleStreamValue)},
  { 51, -1, -1, sizeof(::xviz::Color)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_StyleClass_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_StyleObjectValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_StyleStreamValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_Color_default_instance_),
};

const char descriptor_table_protodef_style_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013style.proto\022\004xviz\032\roptions.proto\"R\n\nSt"
  "yleClass\022\014\n\004name\030\001 \001(\t\022%\n\005style\030\002 \001(\0132\026."
  "xviz.StyleObjectValue:\017\302\273\032\013style/class\"\217"
  "\002\n\020StyleObjectValue\022\022\n\nfill_color\030\001 \001(\014\022"
  "\024\n\014stroke_color\030\002 \001(\014\022\024\n\014stroke_width\030\003 "
  "\001(\002\022\016\n\006radius\030\004 \001(\002\022\021\n\ttext_size\030\005 \001(\002\022\025"
  "\n\rtext_rotation\030\006 \001(\002\022%\n\013text_anchor\030\007 \001"
  "(\0162\020.xviz.TextAnchor\0222\n\rtext_baseline\030\010 "
  "\001(\0162\033.xviz.TextAlignmentBaseline\022\016\n\006heig"
  "ht\030\t \001(\002:\026\302\273\032\022style/object_value\"\330\004\n\020Sty"
  "leStreamValue\022\022\n\nfill_color\030\001 \001(\014\022\024\n\014str"
  "oke_color\030\002 \001(\014\022\024\n\014stroke_width\030\003 \001(\002\022\016\n"
  "\006radius\030\004 \001(\002\022\021\n\ttext_size\030\005 \001(\002\022\025\n\rtext"
  "_rotation\030\006 \001(\002\022%\n\013text_anchor\030\007 \001(\0162\020.x"
  "viz.TextAnchor\0222\n\rtext_baseline\030\010 \001(\0162\033."
  "xviz.TextAlignmentBaseline\022\016\n\006height\030\t \001"
  "(\002\022\031\n\021radius_min_pixels\030\n \001(\r\022\031\n\021radius_"
  "max_pixels\030\013 \001(\r\022\037\n\027stroke_width_min_pix"
  "els\030\014 \001(\r\022\037\n\027stroke_width_max_pixels\030\r \001"
  "(\r\022\017\n\007opacity\030\016 \001(\002\022\017\n\007stroked\030\017 \001(\010\022\016\n\006"
  "filled\030\020 \001(\010\022\020\n\010extruded\030\021 \001(\010\022\025\n\rradius"
  "_pixels\030\022 \001(\r\022\023\n\013font_weight\030\023 \001(\r\022\023\n\013fo"
  "nt_family\030\024 \001(\t\022.\n\020point_color_mode\030\025 \001("
  "\0162\024.xviz.PointColorMode\022\032\n\022point_color_d"
  "omain\030\026 \003(\002:\026\302\273\032\022style/stream_value\"\027\n\005C"
  "olor\022\016\n\006values\030\001 \001(\014*E\n\nTextAnchor\022\027\n\023TE"
  "XT_ANCHOR_INVALID\020\000\022\t\n\005START\020\001\022\n\n\006MIDDLE"
  "\020\002\022\007\n\003END\020\003*]\n\025TextAlignmentBaseline\022#\n\037"
  "TEXT_ALIGNMENT_BASELINE_INVALID\020\000\022\007\n\003TOP"
  "\020\001\022\n\n\006CENTER\020\002\022\n\n\006BOTTOM\020\003*V\n\016PointColor"
  "Mode\022\034\n\030POINT_COLOR_MODE_INVALID\020\000\022\r\n\tEL"
  "EVATION\020\001\022\027\n\023DISTANCE_TO_VEHICLE\020\002B<\n\013co"
  "m.xviz.v2B\nStyleProtoP\001Z\004v2pb\242\002\004XVIZ\252\002\007x"
  "viz.V2\312\002\007Xviz\\V2b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_style_2eproto_deps[1] = {
  &::descriptor_table_options_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_style_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_style_2eproto = {
  false, false, 1344, descriptor_table_protodef_style_2eproto, "style.proto", 
  &descriptor_table_style_2eproto_once, descriptor_table_style_2eproto_deps, 1, 4,
  schemas, file_default_instances, TableStruct_style_2eproto::offsets,
  file_level_metadata_style_2eproto, file_level_enum_descriptors_style_2eproto, file_level_service_descriptors_style_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_style_2eproto_getter() {
  return &descriptor_table_style_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_style_2eproto(&descriptor_table_style_2eproto);
namespace xviz {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TextAnchor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_style_2eproto);
  return file_level_enum_descriptors_style_2eproto[0];
}
bool TextAnchor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TextAlignmentBaseline_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_style_2eproto);
  return file_level_enum_descriptors_style_2eproto[1];
}
bool TextAlignmentBaseline_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PointColorMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_style_2eproto);
  return file_level_enum_descriptors_style_2eproto[2];
}
bool PointColorMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class StyleClass::_Internal {
 public:
  static const ::xviz::StyleObjectValue& style(const StyleClass* msg);
};

const ::xviz::StyleObjectValue&
StyleClass::_Internal::style(const StyleClass* msg) {
  return *msg->style_;
}
StyleClass::StyleClass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xviz.StyleClass)
}
StyleClass::StyleClass(const StyleClass& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_style()) {
    style_ = new ::xviz::StyleObjectValue(*from.style_);
  } else {
    style_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:xviz.StyleClass)
}

inline void StyleClass::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
style_ = nullptr;
}

StyleClass::~StyleClass() {
  // @@protoc_insertion_point(destructor:xviz.StyleClass)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StyleClass::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete style_;
}

void StyleClass::ArenaDtor(void* object) {
  StyleClass* _this = reinterpret_cast< StyleClass* >(object);
  (void)_this;
}
void StyleClass::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StyleClass::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StyleClass::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.StyleClass)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && style_ != nullptr) {
    delete style_;
  }
  style_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StyleClass::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.StyleClass.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xviz.StyleObjectValue style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StyleClass::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.StyleClass)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.StyleClass.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .xviz.StyleObjectValue style = 2;
  if (this->_internal_has_style()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::style(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.StyleClass)
  return target;
}

size_t StyleClass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.StyleClass)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .xviz.StyleObjectValue style = 2;
  if (this->_internal_has_style()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *style_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StyleClass::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StyleClass::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StyleClass::GetClassData() const { return &_class_data_; }

void StyleClass::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StyleClass *>(to)->MergeFrom(
      static_cast<const StyleClass &>(from));
}


void StyleClass::MergeFrom(const StyleClass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.StyleClass)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_style()) {
    _internal_mutable_style()->::xviz::StyleObjectValue::MergeFrom(from._internal_style());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StyleClass::CopyFrom(const StyleClass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.StyleClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleClass::IsInitialized() const {
  return true;
}

void StyleClass::InternalSwap(StyleClass* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(style_, other->style_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StyleClass::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_style_2eproto_getter, &descriptor_table_style_2eproto_once,
      file_level_metadata_style_2eproto[0]);
}

// ===================================================================

class StyleObjectValue::_Internal {
 public:
};

StyleObjectValue::StyleObjectValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xviz.StyleObjectValue)
}
StyleObjectValue::StyleObjectValue(const StyleObjectValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fill_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fill_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fill_color().empty()) {
    fill_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fill_color(), 
      GetArenaForAllocation());
  }
  stroke_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stroke_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stroke_color().empty()) {
    stroke_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stroke_color(), 
      GetArenaForAllocation());
  }
  ::memcpy(&stroke_width_, &from.stroke_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&stroke_width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:xviz.StyleObjectValue)
}

inline void StyleObjectValue::SharedCtor() {
fill_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fill_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
stroke_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stroke_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stroke_width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&stroke_width_)) + sizeof(height_));
}

StyleObjectValue::~StyleObjectValue() {
  // @@protoc_insertion_point(destructor:xviz.StyleObjectValue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StyleObjectValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  fill_color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stroke_color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StyleObjectValue::ArenaDtor(void* object) {
  StyleObjectValue* _this = reinterpret_cast< StyleObjectValue* >(object);
  (void)_this;
}
void StyleObjectValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StyleObjectValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StyleObjectValue::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.StyleObjectValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fill_color_.ClearToEmpty();
  stroke_color_.ClearToEmpty();
  ::memset(&stroke_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&stroke_width_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StyleObjectValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes fill_color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_fill_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes stroke_color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_stroke_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float stroke_width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          stroke_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float radius = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float text_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          text_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float text_rotation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          text_rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .xviz.TextAnchor text_anchor = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_text_anchor(static_cast<::xviz::TextAnchor>(val));
        } else
          goto handle_unusual;
        continue;
      // .xviz.TextAlignmentBaseline text_baseline = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_text_baseline(static_cast<::xviz::TextAlignmentBaseline>(val));
        } else
          goto handle_unusual;
        continue;
      // float height = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StyleObjectValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.StyleObjectValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes fill_color = 1;
  if (!this->_internal_fill_color().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_fill_color(), target);
  }

  // bytes stroke_color = 2;
  if (!this->_internal_stroke_color().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_stroke_color(), target);
  }

  // float stroke_width = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_stroke_width = this->_internal_stroke_width();
  uint32_t raw_stroke_width;
  memcpy(&raw_stroke_width, &tmp_stroke_width, sizeof(tmp_stroke_width));
  if (raw_stroke_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_stroke_width(), target);
  }

  // float radius = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_radius(), target);
  }

  // float text_size = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_text_size = this->_internal_text_size();
  uint32_t raw_text_size;
  memcpy(&raw_text_size, &tmp_text_size, sizeof(tmp_text_size));
  if (raw_text_size != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_text_size(), target);
  }

  // float text_rotation = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_text_rotation = this->_internal_text_rotation();
  uint32_t raw_text_rotation;
  memcpy(&raw_text_rotation, &tmp_text_rotation, sizeof(tmp_text_rotation));
  if (raw_text_rotation != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_text_rotation(), target);
  }

  // .xviz.TextAnchor text_anchor = 7;
  if (this->_internal_text_anchor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_text_anchor(), target);
  }

  // .xviz.TextAlignmentBaseline text_baseline = 8;
  if (this->_internal_text_baseline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_text_baseline(), target);
  }

  // float height = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.StyleObjectValue)
  return target;
}

size_t StyleObjectValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.StyleObjectValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes fill_color = 1;
  if (!this->_internal_fill_color().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_fill_color());
  }

  // bytes stroke_color = 2;
  if (!this->_internal_stroke_color().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_stroke_color());
  }

  // float stroke_width = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_stroke_width = this->_internal_stroke_width();
  uint32_t raw_stroke_width;
  memcpy(&raw_stroke_width, &tmp_stroke_width, sizeof(tmp_stroke_width));
  if (raw_stroke_width != 0) {
    total_size += 1 + 4;
  }

  // float radius = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    total_size += 1 + 4;
  }

  // float text_size = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_text_size = this->_internal_text_size();
  uint32_t raw_text_size;
  memcpy(&raw_text_size, &tmp_text_size, sizeof(tmp_text_size));
  if (raw_text_size != 0) {
    total_size += 1 + 4;
  }

  // float text_rotation = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_text_rotation = this->_internal_text_rotation();
  uint32_t raw_text_rotation;
  memcpy(&raw_text_rotation, &tmp_text_rotation, sizeof(tmp_text_rotation));
  if (raw_text_rotation != 0) {
    total_size += 1 + 4;
  }

  // .xviz.TextAnchor text_anchor = 7;
  if (this->_internal_text_anchor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_text_anchor());
  }

  // .xviz.TextAlignmentBaseline text_baseline = 8;
  if (this->_internal_text_baseline() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_text_baseline());
  }

  // float height = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StyleObjectValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StyleObjectValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StyleObjectValue::GetClassData() const { return &_class_data_; }

void StyleObjectValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StyleObjectValue *>(to)->MergeFrom(
      static_cast<const StyleObjectValue &>(from));
}


void StyleObjectValue::MergeFrom(const StyleObjectValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.StyleObjectValue)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_fill_color().empty()) {
    _internal_set_fill_color(from._internal_fill_color());
  }
  if (!from._internal_stroke_color().empty()) {
    _internal_set_stroke_color(from._internal_stroke_color());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_stroke_width = from._internal_stroke_width();
  uint32_t raw_stroke_width;
  memcpy(&raw_stroke_width, &tmp_stroke_width, sizeof(tmp_stroke_width));
  if (raw_stroke_width != 0) {
    _internal_set_stroke_width(from._internal_stroke_width());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = from._internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    _internal_set_radius(from._internal_radius());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_text_size = from._internal_text_size();
  uint32_t raw_text_size;
  memcpy(&raw_text_size, &tmp_text_size, sizeof(tmp_text_size));
  if (raw_text_size != 0) {
    _internal_set_text_size(from._internal_text_size());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_text_rotation = from._internal_text_rotation();
  uint32_t raw_text_rotation;
  memcpy(&raw_text_rotation, &tmp_text_rotation, sizeof(tmp_text_rotation));
  if (raw_text_rotation != 0) {
    _internal_set_text_rotation(from._internal_text_rotation());
  }
  if (from._internal_text_anchor() != 0) {
    _internal_set_text_anchor(from._internal_text_anchor());
  }
  if (from._internal_text_baseline() != 0) {
    _internal_set_text_baseline(from._internal_text_baseline());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = from._internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StyleObjectValue::CopyFrom(const StyleObjectValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.StyleObjectValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleObjectValue::IsInitialized() const {
  return true;
}

void StyleObjectValue::InternalSwap(StyleObjectValue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &fill_color_, lhs_arena,
      &other->fill_color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stroke_color_, lhs_arena,
      &other->stroke_color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StyleObjectValue, height_)
      + sizeof(StyleObjectValue::height_)
      - PROTOBUF_FIELD_OFFSET(StyleObjectValue, stroke_width_)>(
          reinterpret_cast<char*>(&stroke_width_),
          reinterpret_cast<char*>(&other->stroke_width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StyleObjectValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_style_2eproto_getter, &descriptor_table_style_2eproto_once,
      file_level_metadata_style_2eproto[1]);
}

// ===================================================================

class StyleStreamValue::_Internal {
 public:
};

StyleStreamValue::StyleStreamValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  point_color_domain_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xviz.StyleStreamValue)
}
StyleStreamValue::StyleStreamValue(const StyleStreamValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      point_color_domain_(from.point_color_domain_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fill_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fill_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fill_color().empty()) {
    fill_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fill_color(), 
      GetArenaForAllocation());
  }
  stroke_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stroke_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stroke_color().empty()) {
    stroke_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stroke_color(), 
      GetArenaForAllocation());
  }
  font_family_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    font_family_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_font_family().empty()) {
    font_family_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_font_family(), 
      GetArenaForAllocation());
  }
  ::memcpy(&stroke_width_, &from.stroke_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&point_color_mode_) -
    reinterpret_cast<char*>(&stroke_width_)) + sizeof(point_color_mode_));
  // @@protoc_insertion_point(copy_constructor:xviz.StyleStreamValue)
}

inline void StyleStreamValue::SharedCtor() {
fill_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fill_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
stroke_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stroke_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
font_family_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  font_family_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stroke_width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&point_color_mode_) -
    reinterpret_cast<char*>(&stroke_width_)) + sizeof(point_color_mode_));
}

StyleStreamValue::~StyleStreamValue() {
  // @@protoc_insertion_point(destructor:xviz.StyleStreamValue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StyleStreamValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  fill_color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stroke_color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  font_family_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StyleStreamValue::ArenaDtor(void* object) {
  StyleStreamValue* _this = reinterpret_cast< StyleStreamValue* >(object);
  (void)_this;
}
void StyleStreamValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StyleStreamValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StyleStreamValue::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.StyleStreamValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_color_domain_.Clear();
  fill_color_.ClearToEmpty();
  stroke_color_.ClearToEmpty();
  font_family_.ClearToEmpty();
  ::memset(&stroke_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_color_mode_) -
      reinterpret_cast<char*>(&stroke_width_)) + sizeof(point_color_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StyleStreamValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes fill_color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_fill_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes stroke_color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_stroke_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float stroke_width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          stroke_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float radius = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float text_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          text_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float text_rotation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          text_rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .xviz.TextAnchor text_anchor = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_text_anchor(static_cast<::xviz::TextAnchor>(val));
        } else
          goto handle_unusual;
        continue;
      // .xviz.TextAlignmentBaseline text_baseline = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_text_baseline(static_cast<::xviz::TextAlignmentBaseline>(val));
        } else
          goto handle_unusual;
        continue;
      // float height = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 radius_min_pixels = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          radius_min_pixels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 radius_max_pixels = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          radius_max_pixels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 stroke_width_min_pixels = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          stroke_width_min_pixels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 stroke_width_max_pixels = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          stroke_width_max_pixels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float opacity = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool stroked = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          stroked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool filled = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          filled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool extruded = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          extruded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 radius_pixels = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          radius_pixels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 font_weight = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          font_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string font_family = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_font_family();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.StyleStreamValue.font_family"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xviz.PointColorMode point_color_mode = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_point_color_mode(static_cast<::xviz::PointColorMode>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated float point_color_domain = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_point_color_domain(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 181) {
          _internal_add_point_color_domain(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StyleStreamValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.StyleStreamValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes fill_color = 1;
  if (!this->_internal_fill_color().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_fill_color(), target);
  }

  // bytes stroke_color = 2;
  if (!this->_internal_stroke_color().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_stroke_color(), target);
  }

  // float stroke_width = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_stroke_width = this->_internal_stroke_width();
  uint32_t raw_stroke_width;
  memcpy(&raw_stroke_width, &tmp_stroke_width, sizeof(tmp_stroke_width));
  if (raw_stroke_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_stroke_width(), target);
  }

  // float radius = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_radius(), target);
  }

  // float text_size = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_text_size = this->_internal_text_size();
  uint32_t raw_text_size;
  memcpy(&raw_text_size, &tmp_text_size, sizeof(tmp_text_size));
  if (raw_text_size != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_text_size(), target);
  }

  // float text_rotation = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_text_rotation = this->_internal_text_rotation();
  uint32_t raw_text_rotation;
  memcpy(&raw_text_rotation, &tmp_text_rotation, sizeof(tmp_text_rotation));
  if (raw_text_rotation != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_text_rotation(), target);
  }

  // .xviz.TextAnchor text_anchor = 7;
  if (this->_internal_text_anchor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_text_anchor(), target);
  }

  // .xviz.TextAlignmentBaseline text_baseline = 8;
  if (this->_internal_text_baseline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_text_baseline(), target);
  }

  // float height = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_height(), target);
  }

  // uint32 radius_min_pixels = 10;
  if (this->_internal_radius_min_pixels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_radius_min_pixels(), target);
  }

  // uint32 radius_max_pixels = 11;
  if (this->_internal_radius_max_pixels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_radius_max_pixels(), target);
  }

  // uint32 stroke_width_min_pixels = 12;
  if (this->_internal_stroke_width_min_pixels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_stroke_width_min_pixels(), target);
  }

  // uint32 stroke_width_max_pixels = 13;
  if (this->_internal_stroke_width_max_pixels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_stroke_width_max_pixels(), target);
  }

  // float opacity = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_opacity = this->_internal_opacity();
  uint32_t raw_opacity;
  memcpy(&raw_opacity, &tmp_opacity, sizeof(tmp_opacity));
  if (raw_opacity != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_opacity(), target);
  }

  // bool stroked = 15;
  if (this->_internal_stroked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_stroked(), target);
  }

  // bool filled = 16;
  if (this->_internal_filled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_filled(), target);
  }

  // bool extruded = 17;
  if (this->_internal_extruded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_extruded(), target);
  }

  // uint32 radius_pixels = 18;
  if (this->_internal_radius_pixels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_radius_pixels(), target);
  }

  // uint32 font_weight = 19;
  if (this->_internal_font_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_font_weight(), target);
  }

  // string font_family = 20;
  if (!this->_internal_font_family().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_font_family().data(), static_cast<int>(this->_internal_font_family().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.StyleStreamValue.font_family");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_font_family(), target);
  }

  // .xviz.PointColorMode point_color_mode = 21;
  if (this->_internal_point_color_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->_internal_point_color_mode(), target);
  }

  // repeated float point_color_domain = 22;
  if (this->_internal_point_color_domain_size() > 0) {
    target = stream->WriteFixedPacked(22, _internal_point_color_domain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.StyleStreamValue)
  return target;
}

size_t StyleStreamValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.StyleStreamValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float point_color_domain = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_point_color_domain_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // bytes fill_color = 1;
  if (!this->_internal_fill_color().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_fill_color());
  }

  // bytes stroke_color = 2;
  if (!this->_internal_stroke_color().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_stroke_color());
  }

  // string font_family = 20;
  if (!this->_internal_font_family().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_font_family());
  }

  // float stroke_width = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_stroke_width = this->_internal_stroke_width();
  uint32_t raw_stroke_width;
  memcpy(&raw_stroke_width, &tmp_stroke_width, sizeof(tmp_stroke_width));
  if (raw_stroke_width != 0) {
    total_size += 1 + 4;
  }

  // float radius = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    total_size += 1 + 4;
  }

  // float text_size = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_text_size = this->_internal_text_size();
  uint32_t raw_text_size;
  memcpy(&raw_text_size, &tmp_text_size, sizeof(tmp_text_size));
  if (raw_text_size != 0) {
    total_size += 1 + 4;
  }

  // float text_rotation = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_text_rotation = this->_internal_text_rotation();
  uint32_t raw_text_rotation;
  memcpy(&raw_text_rotation, &tmp_text_rotation, sizeof(tmp_text_rotation));
  if (raw_text_rotation != 0) {
    total_size += 1 + 4;
  }

  // .xviz.TextAnchor text_anchor = 7;
  if (this->_internal_text_anchor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_text_anchor());
  }

  // .xviz.TextAlignmentBaseline text_baseline = 8;
  if (this->_internal_text_baseline() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_text_baseline());
  }

  // float height = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    total_size += 1 + 4;
  }

  // uint32 radius_min_pixels = 10;
  if (this->_internal_radius_min_pixels() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_radius_min_pixels());
  }

  // uint32 radius_max_pixels = 11;
  if (this->_internal_radius_max_pixels() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_radius_max_pixels());
  }

  // uint32 stroke_width_min_pixels = 12;
  if (this->_internal_stroke_width_min_pixels() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_stroke_width_min_pixels());
  }

  // uint32 stroke_width_max_pixels = 13;
  if (this->_internal_stroke_width_max_pixels() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_stroke_width_max_pixels());
  }

  // float opacity = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_opacity = this->_internal_opacity();
  uint32_t raw_opacity;
  memcpy(&raw_opacity, &tmp_opacity, sizeof(tmp_opacity));
  if (raw_opacity != 0) {
    total_size += 1 + 4;
  }

  // bool stroked = 15;
  if (this->_internal_stroked() != 0) {
    total_size += 1 + 1;
  }

  // bool filled = 16;
  if (this->_internal_filled() != 0) {
    total_size += 2 + 1;
  }

  // bool extruded = 17;
  if (this->_internal_extruded() != 0) {
    total_size += 2 + 1;
  }

  // uint32 radius_pixels = 18;
  if (this->_internal_radius_pixels() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_radius_pixels());
  }

  // uint32 font_weight = 19;
  if (this->_internal_font_weight() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_font_weight());
  }

  // .xviz.PointColorMode point_color_mode = 21;
  if (this->_internal_point_color_mode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_point_color_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StyleStreamValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StyleStreamValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StyleStreamValue::GetClassData() const { return &_class_data_; }

void StyleStreamValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StyleStreamValue *>(to)->MergeFrom(
      static_cast<const StyleStreamValue &>(from));
}


void StyleStreamValue::MergeFrom(const StyleStreamValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.StyleStreamValue)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  point_color_domain_.MergeFrom(from.point_color_domain_);
  if (!from._internal_fill_color().empty()) {
    _internal_set_fill_color(from._internal_fill_color());
  }
  if (!from._internal_stroke_color().empty()) {
    _internal_set_stroke_color(from._internal_stroke_color());
  }
  if (!from._internal_font_family().empty()) {
    _internal_set_font_family(from._internal_font_family());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_stroke_width = from._internal_stroke_width();
  uint32_t raw_stroke_width;
  memcpy(&raw_stroke_width, &tmp_stroke_width, sizeof(tmp_stroke_width));
  if (raw_stroke_width != 0) {
    _internal_set_stroke_width(from._internal_stroke_width());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = from._internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    _internal_set_radius(from._internal_radius());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_text_size = from._internal_text_size();
  uint32_t raw_text_size;
  memcpy(&raw_text_size, &tmp_text_size, sizeof(tmp_text_size));
  if (raw_text_size != 0) {
    _internal_set_text_size(from._internal_text_size());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_text_rotation = from._internal_text_rotation();
  uint32_t raw_text_rotation;
  memcpy(&raw_text_rotation, &tmp_text_rotation, sizeof(tmp_text_rotation));
  if (raw_text_rotation != 0) {
    _internal_set_text_rotation(from._internal_text_rotation());
  }
  if (from._internal_text_anchor() != 0) {
    _internal_set_text_anchor(from._internal_text_anchor());
  }
  if (from._internal_text_baseline() != 0) {
    _internal_set_text_baseline(from._internal_text_baseline());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = from._internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_radius_min_pixels() != 0) {
    _internal_set_radius_min_pixels(from._internal_radius_min_pixels());
  }
  if (from._internal_radius_max_pixels() != 0) {
    _internal_set_radius_max_pixels(from._internal_radius_max_pixels());
  }
  if (from._internal_stroke_width_min_pixels() != 0) {
    _internal_set_stroke_width_min_pixels(from._internal_stroke_width_min_pixels());
  }
  if (from._internal_stroke_width_max_pixels() != 0) {
    _internal_set_stroke_width_max_pixels(from._internal_stroke_width_max_pixels());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_opacity = from._internal_opacity();
  uint32_t raw_opacity;
  memcpy(&raw_opacity, &tmp_opacity, sizeof(tmp_opacity));
  if (raw_opacity != 0) {
    _internal_set_opacity(from._internal_opacity());
  }
  if (from._internal_stroked() != 0) {
    _internal_set_stroked(from._internal_stroked());
  }
  if (from._internal_filled() != 0) {
    _internal_set_filled(from._internal_filled());
  }
  if (from._internal_extruded() != 0) {
    _internal_set_extruded(from._internal_extruded());
  }
  if (from._internal_radius_pixels() != 0) {
    _internal_set_radius_pixels(from._internal_radius_pixels());
  }
  if (from._internal_font_weight() != 0) {
    _internal_set_font_weight(from._internal_font_weight());
  }
  if (from._internal_point_color_mode() != 0) {
    _internal_set_point_color_mode(from._internal_point_color_mode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StyleStreamValue::CopyFrom(const StyleStreamValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.StyleStreamValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleStreamValue::IsInitialized() const {
  return true;
}

void StyleStreamValue::InternalSwap(StyleStreamValue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  point_color_domain_.InternalSwap(&other->point_color_domain_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &fill_color_, lhs_arena,
      &other->fill_color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stroke_color_, lhs_arena,
      &other->stroke_color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &font_family_, lhs_arena,
      &other->font_family_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StyleStreamValue, point_color_mode_)
      + sizeof(StyleStreamValue::point_color_mode_)
      - PROTOBUF_FIELD_OFFSET(StyleStreamValue, stroke_width_)>(
          reinterpret_cast<char*>(&stroke_width_),
          reinterpret_cast<char*>(&other->stroke_width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StyleStreamValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_style_2eproto_getter, &descriptor_table_style_2eproto_once,
      file_level_metadata_style_2eproto[2]);
}

// ===================================================================

class Color::_Internal {
 public:
};

Color::Color(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xviz.Color)
}
Color::Color(const Color& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  values_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    values_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_values().empty()) {
    values_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_values(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:xviz.Color)
}

inline void Color::SharedCtor() {
values_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  values_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:xviz.Color)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Color::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  values_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Color::ArenaDtor(void* object) {
  Color* _this = reinterpret_cast< Color* >(object);
  (void)_this;
}
void Color::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Color::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.Color)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Color::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_values();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Color::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.Color)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes values = 1;
  if (!this->_internal_values().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.Color)
  return target;
}

size_t Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.Color)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes values = 1;
  if (!this->_internal_values().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_values());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Color::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Color::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Color::GetClassData() const { return &_class_data_; }

void Color::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Color *>(to)->MergeFrom(
      static_cast<const Color &>(from));
}


void Color::MergeFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.Color)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_values().empty()) {
    _internal_set_values(from._internal_values());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  return true;
}

void Color::InternalSwap(Color* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &values_, lhs_arena,
      &other->values_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Color::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_style_2eproto_getter, &descriptor_table_style_2eproto_once,
      file_level_metadata_style_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace xviz
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xviz::StyleClass* Arena::CreateMaybeMessage< ::xviz::StyleClass >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::StyleClass >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::StyleObjectValue* Arena::CreateMaybeMessage< ::xviz::StyleObjectValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::StyleObjectValue >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::StyleStreamValue* Arena::CreateMaybeMessage< ::xviz::StyleStreamValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::StyleStreamValue >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::Color* Arena::CreateMaybeMessage< ::xviz::Color >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::Color >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
