// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core.proto

#include "protobuf/core.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace xviz {
constexpr StreamSet_PosesEntry_DoNotUse::StreamSet_PosesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct StreamSet_PosesEntry_DoNotUseDefaultTypeInternal {
  constexpr StreamSet_PosesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamSet_PosesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    StreamSet_PosesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamSet_PosesEntry_DoNotUseDefaultTypeInternal _StreamSet_PosesEntry_DoNotUse_default_instance_;
constexpr StreamSet_PrimitivesEntry_DoNotUse::StreamSet_PrimitivesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct StreamSet_PrimitivesEntry_DoNotUseDefaultTypeInternal {
  constexpr StreamSet_PrimitivesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamSet_PrimitivesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    StreamSet_PrimitivesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamSet_PrimitivesEntry_DoNotUseDefaultTypeInternal _StreamSet_PrimitivesEntry_DoNotUse_default_instance_;
constexpr StreamSet_FutureInstancesEntry_DoNotUse::StreamSet_FutureInstancesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct StreamSet_FutureInstancesEntry_DoNotUseDefaultTypeInternal {
  constexpr StreamSet_FutureInstancesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamSet_FutureInstancesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    StreamSet_FutureInstancesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamSet_FutureInstancesEntry_DoNotUseDefaultTypeInternal _StreamSet_FutureInstancesEntry_DoNotUse_default_instance_;
constexpr StreamSet_VariablesEntry_DoNotUse::StreamSet_VariablesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct StreamSet_VariablesEntry_DoNotUseDefaultTypeInternal {
  constexpr StreamSet_VariablesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamSet_VariablesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    StreamSet_VariablesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamSet_VariablesEntry_DoNotUseDefaultTypeInternal _StreamSet_VariablesEntry_DoNotUse_default_instance_;
constexpr StreamSet_AnnotationsEntry_DoNotUse::StreamSet_AnnotationsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct StreamSet_AnnotationsEntry_DoNotUseDefaultTypeInternal {
  constexpr StreamSet_AnnotationsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamSet_AnnotationsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    StreamSet_AnnotationsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamSet_AnnotationsEntry_DoNotUseDefaultTypeInternal _StreamSet_AnnotationsEntry_DoNotUse_default_instance_;
constexpr StreamSet_UiPrimitivesEntry_DoNotUse::StreamSet_UiPrimitivesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct StreamSet_UiPrimitivesEntry_DoNotUseDefaultTypeInternal {
  constexpr StreamSet_UiPrimitivesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamSet_UiPrimitivesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    StreamSet_UiPrimitivesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamSet_UiPrimitivesEntry_DoNotUseDefaultTypeInternal _StreamSet_UiPrimitivesEntry_DoNotUse_default_instance_;
constexpr StreamSet_LinksEntry_DoNotUse::StreamSet_LinksEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct StreamSet_LinksEntry_DoNotUseDefaultTypeInternal {
  constexpr StreamSet_LinksEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamSet_LinksEntry_DoNotUseDefaultTypeInternal() {}
  union {
    StreamSet_LinksEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamSet_LinksEntry_DoNotUseDefaultTypeInternal _StreamSet_LinksEntry_DoNotUse_default_instance_;
constexpr StreamSet::StreamSet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : poses_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , primitives_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , time_series_()
  , future_instances_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , variables_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , annotations_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , ui_primitives_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , no_data_streams_()
  , links_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , timestamp_(0){}
struct StreamSetDefaultTypeInternal {
  constexpr StreamSetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamSetDefaultTypeInternal() {}
  union {
    StreamSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamSetDefaultTypeInternal _StreamSet_default_instance_;
constexpr Pose::Pose(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_()
  , orientation_()
  , map_origin_(nullptr)
  , timestamp_(0){}
struct PoseDefaultTypeInternal {
  constexpr PoseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PoseDefaultTypeInternal() {}
  union {
    Pose _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PoseDefaultTypeInternal _Pose_default_instance_;
constexpr MapOrigin::MapOrigin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : longitude_(0)
  , latitude_(0)
  , altitude_(0){}
struct MapOriginDefaultTypeInternal {
  constexpr MapOriginDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MapOriginDefaultTypeInternal() {}
  union {
    MapOrigin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MapOriginDefaultTypeInternal _MapOrigin_default_instance_;
constexpr PrimitiveState::PrimitiveState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : polygons_()
  , polylines_()
  , texts_()
  , circles_()
  , points_()
  , stadiums_()
  , images_(){}
struct PrimitiveStateDefaultTypeInternal {
  constexpr PrimitiveStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PrimitiveStateDefaultTypeInternal() {}
  union {
    PrimitiveState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PrimitiveStateDefaultTypeInternal _PrimitiveState_default_instance_;
constexpr UIPrimitiveState::UIPrimitiveState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : treetable_(nullptr){}
struct UIPrimitiveStateDefaultTypeInternal {
  constexpr UIPrimitiveStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UIPrimitiveStateDefaultTypeInternal() {}
  union {
    UIPrimitiveState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UIPrimitiveStateDefaultTypeInternal _UIPrimitiveState_default_instance_;
constexpr TimeSeriesState::TimeSeriesState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : streams_()
  , object_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , values_(nullptr)
  , timestamp_(0){}
struct TimeSeriesStateDefaultTypeInternal {
  constexpr TimeSeriesStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TimeSeriesStateDefaultTypeInternal() {}
  union {
    TimeSeriesState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimeSeriesStateDefaultTypeInternal _TimeSeriesState_default_instance_;
constexpr FutureInstances::FutureInstances(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamps_()
  , primitives_(){}
struct FutureInstancesDefaultTypeInternal {
  constexpr FutureInstancesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FutureInstancesDefaultTypeInternal() {}
  union {
    FutureInstances _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FutureInstancesDefaultTypeInternal _FutureInstances_default_instance_;
constexpr VariableState::VariableState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : variables_(){}
struct VariableStateDefaultTypeInternal {
  constexpr VariableStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VariableStateDefaultTypeInternal() {}
  union {
    VariableState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VariableStateDefaultTypeInternal _VariableState_default_instance_;
constexpr AnnotationState::AnnotationState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : visuals_(){}
struct AnnotationStateDefaultTypeInternal {
  constexpr AnnotationStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnnotationStateDefaultTypeInternal() {}
  union {
    AnnotationState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnnotationStateDefaultTypeInternal _AnnotationState_default_instance_;
constexpr Variable::Variable(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : base_(nullptr)
  , values_(nullptr){}
struct VariableDefaultTypeInternal {
  constexpr VariableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VariableDefaultTypeInternal() {}
  union {
    Variable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VariableDefaultTypeInternal _Variable_default_instance_;
constexpr VariableBase::VariableBase(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct VariableBaseDefaultTypeInternal {
  constexpr VariableBaseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VariableBaseDefaultTypeInternal() {}
  union {
    VariableBase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VariableBaseDefaultTypeInternal _VariableBase_default_instance_;
constexpr Values::Values(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : doubles_()
  , int32s_()
  , _int32s_cached_byte_size_(0)
  , bools_()
  , strings_(){}
struct ValuesDefaultTypeInternal {
  constexpr ValuesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValuesDefaultTypeInternal() {}
  union {
    Values _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValuesDefaultTypeInternal _Values_default_instance_;
constexpr Link::Link(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_pose_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LinkDefaultTypeInternal {
  constexpr LinkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LinkDefaultTypeInternal() {}
  union {
    Link _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LinkDefaultTypeInternal _Link_default_instance_;
}  // namespace xviz
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_core_2eproto[20];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_core_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_core_2eproto = nullptr;

const uint32_t TableStruct_core_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet_PosesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet_PosesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet_PosesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet_PosesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet_PrimitivesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet_PrimitivesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet_PrimitivesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet_PrimitivesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet_FutureInstancesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet_FutureInstancesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet_FutureInstancesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet_FutureInstancesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet_VariablesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet_VariablesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet_VariablesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet_VariablesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet_AnnotationsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet_AnnotationsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet_AnnotationsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet_AnnotationsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet_UiPrimitivesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet_UiPrimitivesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet_UiPrimitivesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet_UiPrimitivesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet_LinksEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet_LinksEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet_LinksEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet_LinksEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet, timestamp_),
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet, poses_),
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet, primitives_),
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet, time_series_),
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet, future_instances_),
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet, variables_),
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet, annotations_),
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet, ui_primitives_),
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet, no_data_streams_),
  PROTOBUF_FIELD_OFFSET(::xviz::StreamSet, links_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::Pose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::Pose, timestamp_),
  PROTOBUF_FIELD_OFFSET(::xviz::Pose, map_origin_),
  PROTOBUF_FIELD_OFFSET(::xviz::Pose, position_),
  PROTOBUF_FIELD_OFFSET(::xviz::Pose, orientation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::MapOrigin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::MapOrigin, longitude_),
  PROTOBUF_FIELD_OFFSET(::xviz::MapOrigin, latitude_),
  PROTOBUF_FIELD_OFFSET(::xviz::MapOrigin, altitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::PrimitiveState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::PrimitiveState, polygons_),
  PROTOBUF_FIELD_OFFSET(::xviz::PrimitiveState, polylines_),
  PROTOBUF_FIELD_OFFSET(::xviz::PrimitiveState, texts_),
  PROTOBUF_FIELD_OFFSET(::xviz::PrimitiveState, circles_),
  PROTOBUF_FIELD_OFFSET(::xviz::PrimitiveState, points_),
  PROTOBUF_FIELD_OFFSET(::xviz::PrimitiveState, stadiums_),
  PROTOBUF_FIELD_OFFSET(::xviz::PrimitiveState, images_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::UIPrimitiveState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::UIPrimitiveState, treetable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::TimeSeriesState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::TimeSeriesState, timestamp_),
  PROTOBUF_FIELD_OFFSET(::xviz::TimeSeriesState, object_id_),
  PROTOBUF_FIELD_OFFSET(::xviz::TimeSeriesState, streams_),
  PROTOBUF_FIELD_OFFSET(::xviz::TimeSeriesState, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::FutureInstances, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::FutureInstances, timestamps_),
  PROTOBUF_FIELD_OFFSET(::xviz::FutureInstances, primitives_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::VariableState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::VariableState, variables_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::AnnotationState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::AnnotationState, visuals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::Variable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::Variable, base_),
  PROTOBUF_FIELD_OFFSET(::xviz::Variable, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::VariableBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::VariableBase, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::Values, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::Values, doubles_),
  PROTOBUF_FIELD_OFFSET(::xviz::Values, int32s_),
  PROTOBUF_FIELD_OFFSET(::xviz::Values, bools_),
  PROTOBUF_FIELD_OFFSET(::xviz::Values, strings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::Link, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xviz::Link, target_pose_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::xviz::StreamSet_PosesEntry_DoNotUse)},
  { 10, 18, -1, sizeof(::xviz::StreamSet_PrimitivesEntry_DoNotUse)},
  { 20, 28, -1, sizeof(::xviz::StreamSet_FutureInstancesEntry_DoNotUse)},
  { 30, 38, -1, sizeof(::xviz::StreamSet_VariablesEntry_DoNotUse)},
  { 40, 48, -1, sizeof(::xviz::StreamSet_AnnotationsEntry_DoNotUse)},
  { 50, 58, -1, sizeof(::xviz::StreamSet_UiPrimitivesEntry_DoNotUse)},
  { 60, 68, -1, sizeof(::xviz::StreamSet_LinksEntry_DoNotUse)},
  { 70, -1, -1, sizeof(::xviz::StreamSet)},
  { 86, -1, -1, sizeof(::xviz::Pose)},
  { 96, -1, -1, sizeof(::xviz::MapOrigin)},
  { 105, -1, -1, sizeof(::xviz::PrimitiveState)},
  { 118, -1, -1, sizeof(::xviz::UIPrimitiveState)},
  { 125, -1, -1, sizeof(::xviz::TimeSeriesState)},
  { 135, -1, -1, sizeof(::xviz::FutureInstances)},
  { 143, -1, -1, sizeof(::xviz::VariableState)},
  { 150, -1, -1, sizeof(::xviz::AnnotationState)},
  { 157, -1, -1, sizeof(::xviz::Variable)},
  { 165, -1, -1, sizeof(::xviz::VariableBase)},
  { 172, -1, -1, sizeof(::xviz::Values)},
  { 182, -1, -1, sizeof(::xviz::Link)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_StreamSet_PosesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_StreamSet_PrimitivesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_StreamSet_FutureInstancesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_StreamSet_VariablesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_StreamSet_AnnotationsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_StreamSet_UiPrimitivesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_StreamSet_LinksEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_StreamSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_Pose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_MapOrigin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_PrimitiveState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_UIPrimitiveState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_TimeSeriesState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_FutureInstances_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_VariableState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_AnnotationState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_Variable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_VariableBase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_Values_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_Link_default_instance_),
};

const char descriptor_table_protodef_core_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ncore.proto\022\004xviz\032\020annotation.proto\032\rop"
  "tions.proto\032\020primitives.proto\032\022uiprimiti"
  "ves.proto\"\322\007\n\tStreamSet\022\021\n\ttimestamp\030\001 \001"
  "(\001\022)\n\005poses\030\002 \003(\0132\032.xviz.StreamSet.Poses"
  "Entry\0223\n\nprimitives\030\003 \003(\0132\037.xviz.StreamS"
  "et.PrimitivesEntry\022*\n\013time_series\030\004 \003(\0132"
  "\025.xviz.TimeSeriesState\022>\n\020future_instanc"
  "es\030\006 \003(\0132$.xviz.StreamSet.FutureInstance"
  "sEntry\0221\n\tvariables\030\007 \003(\0132\036.xviz.StreamS"
  "et.VariablesEntry\0225\n\013annotations\030\010 \003(\0132 "
  ".xviz.StreamSet.AnnotationsEntry\0228\n\rui_p"
  "rimitives\030\t \003(\0132!.xviz.StreamSet.UiPrimi"
  "tivesEntry\022\027\n\017no_data_streams\030\n \003(\t\022)\n\005l"
  "inks\030\013 \003(\0132\032.xviz.StreamSet.LinksEntry\0328"
  "\n\nPosesEntry\022\013\n\003key\030\001 \001(\t\022\031\n\005value\030\002 \001(\013"
  "2\n.xviz.Pose:\0028\001\032G\n\017PrimitivesEntry\022\013\n\003k"
  "ey\030\001 \001(\t\022#\n\005value\030\002 \001(\0132\024.xviz.Primitive"
  "State:\0028\001\032M\n\024FutureInstancesEntry\022\013\n\003key"
  "\030\001 \001(\t\022$\n\005value\030\002 \001(\0132\025.xviz.FutureInsta"
  "nces:\0028\001\032E\n\016VariablesEntry\022\013\n\003key\030\001 \001(\t\022"
  "\"\n\005value\030\002 \001(\0132\023.xviz.VariableState:\0028\001\032"
  "I\n\020AnnotationsEntry\022\013\n\003key\030\001 \001(\t\022$\n\005valu"
  "e\030\002 \001(\0132\025.xviz.AnnotationState:\0028\001\032K\n\021Ui"
  "PrimitivesEntry\022\013\n\003key\030\001 \001(\t\022%\n\005value\030\002 "
  "\001(\0132\026.xviz.UIPrimitiveState:\0028\001\0328\n\nLinks"
  "Entry\022\013\n\003key\030\001 \001(\t\022\031\n\005value\030\002 \001(\0132\n.xviz"
  ".Link:\0028\001:\023\302\273\032\017core/stream_set\"t\n\004Pose\022\021"
  "\n\ttimestamp\030\001 \001(\001\022#\n\nmap_origin\030\002 \001(\0132\017."
  "xviz.MapOrigin\022\020\n\010position\030\003 \003(\001\022\023\n\013orie"
  "ntation\030\004 \003(\001:\r\302\273\032\tcore/pose\"B\n\tMapOrigi"
  "n\022\021\n\tlongitude\030\001 \001(\001\022\020\n\010latitude\030\002 \001(\001\022\020"
  "\n\010altitude\030\003 \001(\001\"\203\002\n\016PrimitiveState\022\037\n\010p"
  "olygons\030\001 \003(\0132\r.xviz.Polygon\022!\n\tpolyline"
  "s\030\002 \003(\0132\016.xviz.Polyline\022\031\n\005texts\030\003 \003(\0132\n"
  ".xviz.Text\022\035\n\007circles\030\004 \003(\0132\014.xviz.Circl"
  "e\022\033\n\006points\030\005 \003(\0132\013.xviz.Point\022\037\n\010stadiu"
  "ms\030\006 \003(\0132\r.xviz.Stadium\022\033\n\006images\030\007 \003(\0132"
  "\013.xviz.Image:\030\302\273\032\024core/primitive_state\"S"
  "\n\020UIPrimitiveState\022\"\n\ttreetable\030\001 \001(\0132\017."
  "xviz.TreeTable:\033\302\273\032\027core/ui_primitive_st"
  "ate\"\201\001\n\017TimeSeriesState\022\021\n\ttimestamp\030\001 \001"
  "(\001\022\021\n\tobject_id\030\002 \001(\t\022\017\n\007streams\030\003 \003(\t\022\034"
  "\n\006values\030\004 \001(\0132\014.xviz.Values:\031\302\273\032\025core/t"
  "imeseries_state\"j\n\017FutureInstances\022\022\n\nti"
  "mestamps\030\001 \003(\001\022(\n\nprimitives\030\002 \003(\0132\024.xvi"
  "z.PrimitiveState:\031\302\273\032\025core/future_instan"
  "ces\"K\n\rVariableState\022!\n\tvariables\030\001 \003(\0132"
  "\016.xviz.Variable:\027\302\273\032\023core/variable_state"
  "\"K\n\017AnnotationState\022\035\n\007visuals\030\001 \003(\0132\014.x"
  "viz.Visual:\031\302\273\032\025core/annotation_state\"]\n"
  "\010Variable\022 \n\004base\030\001 \001(\0132\022.xviz.VariableB"
  "ase\022\034\n\006values\030\002 \001(\0132\014.xviz.Values:\021\302\273\032\rc"
  "ore/variable\"!\n\014VariableBase\022\021\n\tobject_i"
  "d\030\001 \001(\t\"Z\n\006Values\022\017\n\007doubles\030\002 \003(\001\022\016\n\006in"
  "t32s\030\003 \003(\005\022\r\n\005bools\030\004 \003(\010\022\017\n\007strings\030\005 \003"
  "(\t:\017\302\273\032\013core/values\"0\n\004Link\022\023\n\013target_po"
  "se\030\001 \001(\t:\023\302\273\032\017core/link_stateb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_core_2eproto_deps[4] = {
  &::descriptor_table_annotation_2eproto,
  &::descriptor_table_options_2eproto,
  &::descriptor_table_primitives_2eproto,
  &::descriptor_table_uiprimitives_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_core_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_2eproto = {
  false, false, 2277, descriptor_table_protodef_core_2eproto, "core.proto", 
  &descriptor_table_core_2eproto_once, descriptor_table_core_2eproto_deps, 4, 20,
  schemas, file_default_instances, TableStruct_core_2eproto::offsets,
  file_level_metadata_core_2eproto, file_level_enum_descriptors_core_2eproto, file_level_service_descriptors_core_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_core_2eproto_getter() {
  return &descriptor_table_core_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_core_2eproto(&descriptor_table_core_2eproto);
namespace xviz {

// ===================================================================

StreamSet_PosesEntry_DoNotUse::StreamSet_PosesEntry_DoNotUse() {}
StreamSet_PosesEntry_DoNotUse::StreamSet_PosesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void StreamSet_PosesEntry_DoNotUse::MergeFrom(const StreamSet_PosesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata StreamSet_PosesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2eproto_getter, &descriptor_table_core_2eproto_once,
      file_level_metadata_core_2eproto[0]);
}

// ===================================================================

StreamSet_PrimitivesEntry_DoNotUse::StreamSet_PrimitivesEntry_DoNotUse() {}
StreamSet_PrimitivesEntry_DoNotUse::StreamSet_PrimitivesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void StreamSet_PrimitivesEntry_DoNotUse::MergeFrom(const StreamSet_PrimitivesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata StreamSet_PrimitivesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2eproto_getter, &descriptor_table_core_2eproto_once,
      file_level_metadata_core_2eproto[1]);
}

// ===================================================================

StreamSet_FutureInstancesEntry_DoNotUse::StreamSet_FutureInstancesEntry_DoNotUse() {}
StreamSet_FutureInstancesEntry_DoNotUse::StreamSet_FutureInstancesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void StreamSet_FutureInstancesEntry_DoNotUse::MergeFrom(const StreamSet_FutureInstancesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata StreamSet_FutureInstancesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2eproto_getter, &descriptor_table_core_2eproto_once,
      file_level_metadata_core_2eproto[2]);
}

// ===================================================================

StreamSet_VariablesEntry_DoNotUse::StreamSet_VariablesEntry_DoNotUse() {}
StreamSet_VariablesEntry_DoNotUse::StreamSet_VariablesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void StreamSet_VariablesEntry_DoNotUse::MergeFrom(const StreamSet_VariablesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata StreamSet_VariablesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2eproto_getter, &descriptor_table_core_2eproto_once,
      file_level_metadata_core_2eproto[3]);
}

// ===================================================================

StreamSet_AnnotationsEntry_DoNotUse::StreamSet_AnnotationsEntry_DoNotUse() {}
StreamSet_AnnotationsEntry_DoNotUse::StreamSet_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void StreamSet_AnnotationsEntry_DoNotUse::MergeFrom(const StreamSet_AnnotationsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata StreamSet_AnnotationsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2eproto_getter, &descriptor_table_core_2eproto_once,
      file_level_metadata_core_2eproto[4]);
}

// ===================================================================

StreamSet_UiPrimitivesEntry_DoNotUse::StreamSet_UiPrimitivesEntry_DoNotUse() {}
StreamSet_UiPrimitivesEntry_DoNotUse::StreamSet_UiPrimitivesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void StreamSet_UiPrimitivesEntry_DoNotUse::MergeFrom(const StreamSet_UiPrimitivesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata StreamSet_UiPrimitivesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2eproto_getter, &descriptor_table_core_2eproto_once,
      file_level_metadata_core_2eproto[5]);
}

// ===================================================================

StreamSet_LinksEntry_DoNotUse::StreamSet_LinksEntry_DoNotUse() {}
StreamSet_LinksEntry_DoNotUse::StreamSet_LinksEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void StreamSet_LinksEntry_DoNotUse::MergeFrom(const StreamSet_LinksEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata StreamSet_LinksEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2eproto_getter, &descriptor_table_core_2eproto_once,
      file_level_metadata_core_2eproto[6]);
}

// ===================================================================

class StreamSet::_Internal {
 public:
};

StreamSet::StreamSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  poses_(arena),
  primitives_(arena),
  time_series_(arena),
  future_instances_(arena),
  variables_(arena),
  annotations_(arena),
  ui_primitives_(arena),
  no_data_streams_(arena),
  links_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xviz.StreamSet)
}
StreamSet::StreamSet(const StreamSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      time_series_(from.time_series_),
      no_data_streams_(from.no_data_streams_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  poses_.MergeFrom(from.poses_);
  primitives_.MergeFrom(from.primitives_);
  future_instances_.MergeFrom(from.future_instances_);
  variables_.MergeFrom(from.variables_);
  annotations_.MergeFrom(from.annotations_);
  ui_primitives_.MergeFrom(from.ui_primitives_);
  links_.MergeFrom(from.links_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:xviz.StreamSet)
}

inline void StreamSet::SharedCtor() {
timestamp_ = 0;
}

StreamSet::~StreamSet() {
  // @@protoc_insertion_point(destructor:xviz.StreamSet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StreamSet::ArenaDtor(void* object) {
  StreamSet* _this = reinterpret_cast< StreamSet* >(object);
  (void)_this;
  _this->poses_. ~MapField();
  _this->primitives_. ~MapField();
  _this->future_instances_. ~MapField();
  _this->variables_. ~MapField();
  _this->annotations_. ~MapField();
  _this->ui_primitives_. ~MapField();
  _this->links_. ~MapField();
}
inline void StreamSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &StreamSet::ArenaDtor);
  }
}
void StreamSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamSet::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.StreamSet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  poses_.Clear();
  primitives_.Clear();
  time_series_.Clear();
  future_instances_.Clear();
  variables_.Clear();
  annotations_.Clear();
  ui_primitives_.Clear();
  no_data_streams_.Clear();
  links_.Clear();
  timestamp_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // map<string, .xviz.Pose> poses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&poses_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .xviz.PrimitiveState> primitives = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&primitives_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .xviz.TimeSeriesState time_series = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_time_series(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .xviz.FutureInstances> future_instances = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&future_instances_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .xviz.VariableState> variables = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&variables_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .xviz.AnnotationState> annotations = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&annotations_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .xviz.UIPrimitiveState> ui_primitives = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&ui_primitives_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string no_data_streams = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_no_data_streams();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.StreamSet.no_data_streams"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .xviz.Link> links = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&links_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamSet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.StreamSet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double timestamp = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestamp = this->_internal_timestamp();
  uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_timestamp(), target);
  }

  // map<string, .xviz.Pose> poses = 2;
  if (!this->_internal_poses().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::Pose >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "xviz.StreamSet.PosesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_poses().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_poses().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::Pose >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::Pose >::const_iterator
          it = this->_internal_poses().begin();
          it != this->_internal_poses().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = StreamSet_PosesEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::Pose >::const_iterator
          it = this->_internal_poses().begin();
          it != this->_internal_poses().end(); ++it) {
        target = StreamSet_PosesEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .xviz.PrimitiveState> primitives = 3;
  if (!this->_internal_primitives().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::PrimitiveState >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "xviz.StreamSet.PrimitivesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_primitives().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_primitives().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::PrimitiveState >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::PrimitiveState >::const_iterator
          it = this->_internal_primitives().begin();
          it != this->_internal_primitives().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = StreamSet_PrimitivesEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::PrimitiveState >::const_iterator
          it = this->_internal_primitives().begin();
          it != this->_internal_primitives().end(); ++it) {
        target = StreamSet_PrimitivesEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .xviz.TimeSeriesState time_series = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_time_series_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_time_series(i), target, stream);
  }

  // map<string, .xviz.FutureInstances> future_instances = 6;
  if (!this->_internal_future_instances().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::FutureInstances >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "xviz.StreamSet.FutureInstancesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_future_instances().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_future_instances().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::FutureInstances >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::FutureInstances >::const_iterator
          it = this->_internal_future_instances().begin();
          it != this->_internal_future_instances().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = StreamSet_FutureInstancesEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::FutureInstances >::const_iterator
          it = this->_internal_future_instances().begin();
          it != this->_internal_future_instances().end(); ++it) {
        target = StreamSet_FutureInstancesEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .xviz.VariableState> variables = 7;
  if (!this->_internal_variables().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::VariableState >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "xviz.StreamSet.VariablesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_variables().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_variables().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::VariableState >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::VariableState >::const_iterator
          it = this->_internal_variables().begin();
          it != this->_internal_variables().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = StreamSet_VariablesEntry_DoNotUse::Funcs::InternalSerialize(7, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::VariableState >::const_iterator
          it = this->_internal_variables().begin();
          it != this->_internal_variables().end(); ++it) {
        target = StreamSet_VariablesEntry_DoNotUse::Funcs::InternalSerialize(7, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .xviz.AnnotationState> annotations = 8;
  if (!this->_internal_annotations().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::AnnotationState >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "xviz.StreamSet.AnnotationsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_annotations().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_annotations().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::AnnotationState >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::AnnotationState >::const_iterator
          it = this->_internal_annotations().begin();
          it != this->_internal_annotations().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = StreamSet_AnnotationsEntry_DoNotUse::Funcs::InternalSerialize(8, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::AnnotationState >::const_iterator
          it = this->_internal_annotations().begin();
          it != this->_internal_annotations().end(); ++it) {
        target = StreamSet_AnnotationsEntry_DoNotUse::Funcs::InternalSerialize(8, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .xviz.UIPrimitiveState> ui_primitives = 9;
  if (!this->_internal_ui_primitives().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::UIPrimitiveState >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "xviz.StreamSet.UiPrimitivesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_ui_primitives().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_ui_primitives().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::UIPrimitiveState >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::UIPrimitiveState >::const_iterator
          it = this->_internal_ui_primitives().begin();
          it != this->_internal_ui_primitives().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = StreamSet_UiPrimitivesEntry_DoNotUse::Funcs::InternalSerialize(9, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::UIPrimitiveState >::const_iterator
          it = this->_internal_ui_primitives().begin();
          it != this->_internal_ui_primitives().end(); ++it) {
        target = StreamSet_UiPrimitivesEntry_DoNotUse::Funcs::InternalSerialize(9, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated string no_data_streams = 10;
  for (int i = 0, n = this->_internal_no_data_streams_size(); i < n; i++) {
    const auto& s = this->_internal_no_data_streams(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.StreamSet.no_data_streams");
    target = stream->WriteString(10, s, target);
  }

  // map<string, .xviz.Link> links = 11;
  if (!this->_internal_links().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::Link >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "xviz.StreamSet.LinksEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_links().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_links().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::Link >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::Link >::const_iterator
          it = this->_internal_links().begin();
          it != this->_internal_links().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = StreamSet_LinksEntry_DoNotUse::Funcs::InternalSerialize(11, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::Link >::const_iterator
          it = this->_internal_links().begin();
          it != this->_internal_links().end(); ++it) {
        target = StreamSet_LinksEntry_DoNotUse::Funcs::InternalSerialize(11, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.StreamSet)
  return target;
}

size_t StreamSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.StreamSet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .xviz.Pose> poses = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_poses_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::Pose >::const_iterator
      it = this->_internal_poses().begin();
      it != this->_internal_poses().end(); ++it) {
    total_size += StreamSet_PosesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .xviz.PrimitiveState> primitives = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_primitives_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::PrimitiveState >::const_iterator
      it = this->_internal_primitives().begin();
      it != this->_internal_primitives().end(); ++it) {
    total_size += StreamSet_PrimitivesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .xviz.TimeSeriesState time_series = 4;
  total_size += 1UL * this->_internal_time_series_size();
  for (const auto& msg : this->time_series_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .xviz.FutureInstances> future_instances = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_future_instances_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::FutureInstances >::const_iterator
      it = this->_internal_future_instances().begin();
      it != this->_internal_future_instances().end(); ++it) {
    total_size += StreamSet_FutureInstancesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .xviz.VariableState> variables = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_variables_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::VariableState >::const_iterator
      it = this->_internal_variables().begin();
      it != this->_internal_variables().end(); ++it) {
    total_size += StreamSet_VariablesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .xviz.AnnotationState> annotations = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_annotations_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::AnnotationState >::const_iterator
      it = this->_internal_annotations().begin();
      it != this->_internal_annotations().end(); ++it) {
    total_size += StreamSet_AnnotationsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .xviz.UIPrimitiveState> ui_primitives = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ui_primitives_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::UIPrimitiveState >::const_iterator
      it = this->_internal_ui_primitives().begin();
      it != this->_internal_ui_primitives().end(); ++it) {
    total_size += StreamSet_UiPrimitivesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string no_data_streams = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(no_data_streams_.size());
  for (int i = 0, n = no_data_streams_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      no_data_streams_.Get(i));
  }

  // map<string, .xviz.Link> links = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_links_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::Link >::const_iterator
      it = this->_internal_links().begin();
      it != this->_internal_links().end(); ++it) {
    total_size += StreamSet_LinksEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // double timestamp = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestamp = this->_internal_timestamp();
  uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamSet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamSet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamSet::GetClassData() const { return &_class_data_; }

void StreamSet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StreamSet *>(to)->MergeFrom(
      static_cast<const StreamSet &>(from));
}


void StreamSet::MergeFrom(const StreamSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.StreamSet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  poses_.MergeFrom(from.poses_);
  primitives_.MergeFrom(from.primitives_);
  time_series_.MergeFrom(from.time_series_);
  future_instances_.MergeFrom(from.future_instances_);
  variables_.MergeFrom(from.variables_);
  annotations_.MergeFrom(from.annotations_);
  ui_primitives_.MergeFrom(from.ui_primitives_);
  no_data_streams_.MergeFrom(from.no_data_streams_);
  links_.MergeFrom(from.links_);
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestamp = from._internal_timestamp();
  uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamSet::CopyFrom(const StreamSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.StreamSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamSet::IsInitialized() const {
  return true;
}

void StreamSet::InternalSwap(StreamSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  poses_.InternalSwap(&other->poses_);
  primitives_.InternalSwap(&other->primitives_);
  time_series_.InternalSwap(&other->time_series_);
  future_instances_.InternalSwap(&other->future_instances_);
  variables_.InternalSwap(&other->variables_);
  annotations_.InternalSwap(&other->annotations_);
  ui_primitives_.InternalSwap(&other->ui_primitives_);
  no_data_streams_.InternalSwap(&other->no_data_streams_);
  links_.InternalSwap(&other->links_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamSet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2eproto_getter, &descriptor_table_core_2eproto_once,
      file_level_metadata_core_2eproto[7]);
}

// ===================================================================

class Pose::_Internal {
 public:
  static const ::xviz::MapOrigin& map_origin(const Pose* msg);
};

const ::xviz::MapOrigin&
Pose::_Internal::map_origin(const Pose* msg) {
  return *msg->map_origin_;
}
Pose::Pose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  position_(arena),
  orientation_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xviz.Pose)
}
Pose::Pose(const Pose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      position_(from.position_),
      orientation_(from.orientation_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_map_origin()) {
    map_origin_ = new ::xviz::MapOrigin(*from.map_origin_);
  } else {
    map_origin_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:xviz.Pose)
}

inline void Pose::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&map_origin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&map_origin_)) + sizeof(timestamp_));
}

Pose::~Pose() {
  // @@protoc_insertion_point(destructor:xviz.Pose)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Pose::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete map_origin_;
}

void Pose::ArenaDtor(void* object) {
  Pose* _this = reinterpret_cast< Pose* >(object);
  (void)_this;
}
void Pose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.Pose)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  orientation_.Clear();
  if (GetArenaForAllocation() == nullptr && map_origin_ != nullptr) {
    delete map_origin_;
  }
  map_origin_ = nullptr;
  timestamp_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .xviz.MapOrigin map_origin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_origin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_position(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 25) {
          _internal_add_position(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double orientation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_orientation(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 33) {
          _internal_add_orientation(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pose::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.Pose)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double timestamp = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestamp = this->_internal_timestamp();
  uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_timestamp(), target);
  }

  // .xviz.MapOrigin map_origin = 2;
  if (this->_internal_has_map_origin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::map_origin(this), target, stream);
  }

  // repeated double position = 3;
  if (this->_internal_position_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_position(), target);
  }

  // repeated double orientation = 4;
  if (this->_internal_orientation_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_orientation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.Pose)
  return target;
}

size_t Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.Pose)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double position = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_position_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double orientation = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_orientation_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .xviz.MapOrigin map_origin = 2;
  if (this->_internal_has_map_origin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *map_origin_);
  }

  // double timestamp = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestamp = this->_internal_timestamp();
  uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pose::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Pose::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pose::GetClassData() const { return &_class_data_; }

void Pose::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Pose *>(to)->MergeFrom(
      static_cast<const Pose &>(from));
}


void Pose::MergeFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  orientation_.MergeFrom(from.orientation_);
  if (from._internal_has_map_origin()) {
    _internal_mutable_map_origin()->::xviz::MapOrigin::MergeFrom(from._internal_map_origin());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestamp = from._internal_timestamp();
  uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose::IsInitialized() const {
  return true;
}

void Pose::InternalSwap(Pose* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  position_.InternalSwap(&other->position_);
  orientation_.InternalSwap(&other->orientation_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pose, timestamp_)
      + sizeof(Pose::timestamp_)
      - PROTOBUF_FIELD_OFFSET(Pose, map_origin_)>(
          reinterpret_cast<char*>(&map_origin_),
          reinterpret_cast<char*>(&other->map_origin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pose::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2eproto_getter, &descriptor_table_core_2eproto_once,
      file_level_metadata_core_2eproto[8]);
}

// ===================================================================

class MapOrigin::_Internal {
 public:
};

MapOrigin::MapOrigin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xviz.MapOrigin)
}
MapOrigin::MapOrigin(const MapOrigin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&altitude_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(altitude_));
  // @@protoc_insertion_point(copy_constructor:xviz.MapOrigin)
}

inline void MapOrigin::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&longitude_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&altitude_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(altitude_));
}

MapOrigin::~MapOrigin() {
  // @@protoc_insertion_point(destructor:xviz.MapOrigin)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MapOrigin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MapOrigin::ArenaDtor(void* object) {
  MapOrigin* _this = reinterpret_cast< MapOrigin* >(object);
  (void)_this;
}
void MapOrigin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MapOrigin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MapOrigin::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.MapOrigin)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&altitude_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(altitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapOrigin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double longitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double altitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapOrigin::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.MapOrigin)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double longitude = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_longitude(), target);
  }

  // double latitude = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_latitude(), target);
  }

  // double altitude = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_altitude = this->_internal_altitude();
  uint64_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_altitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.MapOrigin)
  return target;
}

size_t MapOrigin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.MapOrigin)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double longitude = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 1 + 8;
  }

  // double latitude = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    total_size += 1 + 8;
  }

  // double altitude = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_altitude = this->_internal_altitude();
  uint64_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapOrigin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MapOrigin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapOrigin::GetClassData() const { return &_class_data_; }

void MapOrigin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MapOrigin *>(to)->MergeFrom(
      static_cast<const MapOrigin &>(from));
}


void MapOrigin::MergeFrom(const MapOrigin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.MapOrigin)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = from._internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _internal_set_longitude(from._internal_longitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = from._internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    _internal_set_latitude(from._internal_latitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_altitude = from._internal_altitude();
  uint64_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    _internal_set_altitude(from._internal_altitude());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapOrigin::CopyFrom(const MapOrigin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.MapOrigin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapOrigin::IsInitialized() const {
  return true;
}

void MapOrigin::InternalSwap(MapOrigin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapOrigin, altitude_)
      + sizeof(MapOrigin::altitude_)
      - PROTOBUF_FIELD_OFFSET(MapOrigin, longitude_)>(
          reinterpret_cast<char*>(&longitude_),
          reinterpret_cast<char*>(&other->longitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MapOrigin::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2eproto_getter, &descriptor_table_core_2eproto_once,
      file_level_metadata_core_2eproto[9]);
}

// ===================================================================

class PrimitiveState::_Internal {
 public:
};

void PrimitiveState::clear_polygons() {
  polygons_.Clear();
}
void PrimitiveState::clear_polylines() {
  polylines_.Clear();
}
void PrimitiveState::clear_texts() {
  texts_.Clear();
}
void PrimitiveState::clear_circles() {
  circles_.Clear();
}
void PrimitiveState::clear_points() {
  points_.Clear();
}
void PrimitiveState::clear_stadiums() {
  stadiums_.Clear();
}
void PrimitiveState::clear_images() {
  images_.Clear();
}
PrimitiveState::PrimitiveState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  polygons_(arena),
  polylines_(arena),
  texts_(arena),
  circles_(arena),
  points_(arena),
  stadiums_(arena),
  images_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xviz.PrimitiveState)
}
PrimitiveState::PrimitiveState(const PrimitiveState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      polygons_(from.polygons_),
      polylines_(from.polylines_),
      texts_(from.texts_),
      circles_(from.circles_),
      points_(from.points_),
      stadiums_(from.stadiums_),
      images_(from.images_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xviz.PrimitiveState)
}

inline void PrimitiveState::SharedCtor() {
}

PrimitiveState::~PrimitiveState() {
  // @@protoc_insertion_point(destructor:xviz.PrimitiveState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PrimitiveState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PrimitiveState::ArenaDtor(void* object) {
  PrimitiveState* _this = reinterpret_cast< PrimitiveState* >(object);
  (void)_this;
}
void PrimitiveState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrimitiveState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PrimitiveState::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.PrimitiveState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polygons_.Clear();
  polylines_.Clear();
  texts_.Clear();
  circles_.Clear();
  points_.Clear();
  stadiums_.Clear();
  images_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrimitiveState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .xviz.Polygon polygons = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_polygons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .xviz.Polyline polylines = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_polylines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .xviz.Text texts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_texts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .xviz.Circle circles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_circles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .xviz.Point points = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .xviz.Stadium stadiums = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stadiums(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .xviz.Image images = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_images(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrimitiveState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.PrimitiveState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .xviz.Polygon polygons = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_polygons_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_polygons(i), target, stream);
  }

  // repeated .xviz.Polyline polylines = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_polylines_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_polylines(i), target, stream);
  }

  // repeated .xviz.Text texts = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_texts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_texts(i), target, stream);
  }

  // repeated .xviz.Circle circles = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_circles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_circles(i), target, stream);
  }

  // repeated .xviz.Point points = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_points(i), target, stream);
  }

  // repeated .xviz.Stadium stadiums = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stadiums_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_stadiums(i), target, stream);
  }

  // repeated .xviz.Image images = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_images_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_images(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.PrimitiveState)
  return target;
}

size_t PrimitiveState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.PrimitiveState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xviz.Polygon polygons = 1;
  total_size += 1UL * this->_internal_polygons_size();
  for (const auto& msg : this->polygons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .xviz.Polyline polylines = 2;
  total_size += 1UL * this->_internal_polylines_size();
  for (const auto& msg : this->polylines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .xviz.Text texts = 3;
  total_size += 1UL * this->_internal_texts_size();
  for (const auto& msg : this->texts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .xviz.Circle circles = 4;
  total_size += 1UL * this->_internal_circles_size();
  for (const auto& msg : this->circles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .xviz.Point points = 5;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .xviz.Stadium stadiums = 6;
  total_size += 1UL * this->_internal_stadiums_size();
  for (const auto& msg : this->stadiums_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .xviz.Image images = 7;
  total_size += 1UL * this->_internal_images_size();
  for (const auto& msg : this->images_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrimitiveState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PrimitiveState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrimitiveState::GetClassData() const { return &_class_data_; }

void PrimitiveState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PrimitiveState *>(to)->MergeFrom(
      static_cast<const PrimitiveState &>(from));
}


void PrimitiveState::MergeFrom(const PrimitiveState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.PrimitiveState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  polygons_.MergeFrom(from.polygons_);
  polylines_.MergeFrom(from.polylines_);
  texts_.MergeFrom(from.texts_);
  circles_.MergeFrom(from.circles_);
  points_.MergeFrom(from.points_);
  stadiums_.MergeFrom(from.stadiums_);
  images_.MergeFrom(from.images_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrimitiveState::CopyFrom(const PrimitiveState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.PrimitiveState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrimitiveState::IsInitialized() const {
  return true;
}

void PrimitiveState::InternalSwap(PrimitiveState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  polygons_.InternalSwap(&other->polygons_);
  polylines_.InternalSwap(&other->polylines_);
  texts_.InternalSwap(&other->texts_);
  circles_.InternalSwap(&other->circles_);
  points_.InternalSwap(&other->points_);
  stadiums_.InternalSwap(&other->stadiums_);
  images_.InternalSwap(&other->images_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrimitiveState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2eproto_getter, &descriptor_table_core_2eproto_once,
      file_level_metadata_core_2eproto[10]);
}

// ===================================================================

class UIPrimitiveState::_Internal {
 public:
  static const ::xviz::TreeTable& treetable(const UIPrimitiveState* msg);
};

const ::xviz::TreeTable&
UIPrimitiveState::_Internal::treetable(const UIPrimitiveState* msg) {
  return *msg->treetable_;
}
void UIPrimitiveState::clear_treetable() {
  if (GetArenaForAllocation() == nullptr && treetable_ != nullptr) {
    delete treetable_;
  }
  treetable_ = nullptr;
}
UIPrimitiveState::UIPrimitiveState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xviz.UIPrimitiveState)
}
UIPrimitiveState::UIPrimitiveState(const UIPrimitiveState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_treetable()) {
    treetable_ = new ::xviz::TreeTable(*from.treetable_);
  } else {
    treetable_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:xviz.UIPrimitiveState)
}

inline void UIPrimitiveState::SharedCtor() {
treetable_ = nullptr;
}

UIPrimitiveState::~UIPrimitiveState() {
  // @@protoc_insertion_point(destructor:xviz.UIPrimitiveState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UIPrimitiveState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete treetable_;
}

void UIPrimitiveState::ArenaDtor(void* object) {
  UIPrimitiveState* _this = reinterpret_cast< UIPrimitiveState* >(object);
  (void)_this;
}
void UIPrimitiveState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UIPrimitiveState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UIPrimitiveState::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.UIPrimitiveState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && treetable_ != nullptr) {
    delete treetable_;
  }
  treetable_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UIPrimitiveState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .xviz.TreeTable treetable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_treetable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UIPrimitiveState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.UIPrimitiveState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .xviz.TreeTable treetable = 1;
  if (this->_internal_has_treetable()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::treetable(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.UIPrimitiveState)
  return target;
}

size_t UIPrimitiveState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.UIPrimitiveState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .xviz.TreeTable treetable = 1;
  if (this->_internal_has_treetable()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *treetable_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UIPrimitiveState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UIPrimitiveState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UIPrimitiveState::GetClassData() const { return &_class_data_; }

void UIPrimitiveState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UIPrimitiveState *>(to)->MergeFrom(
      static_cast<const UIPrimitiveState &>(from));
}


void UIPrimitiveState::MergeFrom(const UIPrimitiveState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.UIPrimitiveState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_treetable()) {
    _internal_mutable_treetable()->::xviz::TreeTable::MergeFrom(from._internal_treetable());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UIPrimitiveState::CopyFrom(const UIPrimitiveState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.UIPrimitiveState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIPrimitiveState::IsInitialized() const {
  return true;
}

void UIPrimitiveState::InternalSwap(UIPrimitiveState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(treetable_, other->treetable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UIPrimitiveState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2eproto_getter, &descriptor_table_core_2eproto_once,
      file_level_metadata_core_2eproto[11]);
}

// ===================================================================

class TimeSeriesState::_Internal {
 public:
  static const ::xviz::Values& values(const TimeSeriesState* msg);
};

const ::xviz::Values&
TimeSeriesState::_Internal::values(const TimeSeriesState* msg) {
  return *msg->values_;
}
TimeSeriesState::TimeSeriesState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  streams_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xviz.TimeSeriesState)
}
TimeSeriesState::TimeSeriesState(const TimeSeriesState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      streams_(from.streams_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    object_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_object_id().empty()) {
    object_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_object_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_values()) {
    values_ = new ::xviz::Values(*from.values_);
  } else {
    values_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:xviz.TimeSeriesState)
}

inline void TimeSeriesState::SharedCtor() {
object_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  object_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&values_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&values_)) + sizeof(timestamp_));
}

TimeSeriesState::~TimeSeriesState() {
  // @@protoc_insertion_point(destructor:xviz.TimeSeriesState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TimeSeriesState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  object_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete values_;
}

void TimeSeriesState::ArenaDtor(void* object) {
  TimeSeriesState* _this = reinterpret_cast< TimeSeriesState* >(object);
  (void)_this;
}
void TimeSeriesState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeSeriesState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TimeSeriesState::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.TimeSeriesState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  streams_.Clear();
  object_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && values_ != nullptr) {
    delete values_;
  }
  values_ = nullptr;
  timestamp_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeSeriesState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string object_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_object_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.TimeSeriesState.object_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string streams = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_streams();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.TimeSeriesState.streams"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .xviz.Values values = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_values(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimeSeriesState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.TimeSeriesState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double timestamp = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestamp = this->_internal_timestamp();
  uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_timestamp(), target);
  }

  // string object_id = 2;
  if (!this->_internal_object_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_object_id().data(), static_cast<int>(this->_internal_object_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.TimeSeriesState.object_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_object_id(), target);
  }

  // repeated string streams = 3;
  for (int i = 0, n = this->_internal_streams_size(); i < n; i++) {
    const auto& s = this->_internal_streams(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.TimeSeriesState.streams");
    target = stream->WriteString(3, s, target);
  }

  // .xviz.Values values = 4;
  if (this->_internal_has_values()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::values(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.TimeSeriesState)
  return target;
}

size_t TimeSeriesState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.TimeSeriesState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string streams = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(streams_.size());
  for (int i = 0, n = streams_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      streams_.Get(i));
  }

  // string object_id = 2;
  if (!this->_internal_object_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_object_id());
  }

  // .xviz.Values values = 4;
  if (this->_internal_has_values()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *values_);
  }

  // double timestamp = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestamp = this->_internal_timestamp();
  uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimeSeriesState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TimeSeriesState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimeSeriesState::GetClassData() const { return &_class_data_; }

void TimeSeriesState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TimeSeriesState *>(to)->MergeFrom(
      static_cast<const TimeSeriesState &>(from));
}


void TimeSeriesState::MergeFrom(const TimeSeriesState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.TimeSeriesState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  streams_.MergeFrom(from.streams_);
  if (!from._internal_object_id().empty()) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_has_values()) {
    _internal_mutable_values()->::xviz::Values::MergeFrom(from._internal_values());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestamp = from._internal_timestamp();
  uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimeSeriesState::CopyFrom(const TimeSeriesState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.TimeSeriesState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSeriesState::IsInitialized() const {
  return true;
}

void TimeSeriesState::InternalSwap(TimeSeriesState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  streams_.InternalSwap(&other->streams_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &object_id_, lhs_arena,
      &other->object_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeSeriesState, timestamp_)
      + sizeof(TimeSeriesState::timestamp_)
      - PROTOBUF_FIELD_OFFSET(TimeSeriesState, values_)>(
          reinterpret_cast<char*>(&values_),
          reinterpret_cast<char*>(&other->values_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeSeriesState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2eproto_getter, &descriptor_table_core_2eproto_once,
      file_level_metadata_core_2eproto[12]);
}

// ===================================================================

class FutureInstances::_Internal {
 public:
};

FutureInstances::FutureInstances(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  timestamps_(arena),
  primitives_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xviz.FutureInstances)
}
FutureInstances::FutureInstances(const FutureInstances& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      timestamps_(from.timestamps_),
      primitives_(from.primitives_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xviz.FutureInstances)
}

inline void FutureInstances::SharedCtor() {
}

FutureInstances::~FutureInstances() {
  // @@protoc_insertion_point(destructor:xviz.FutureInstances)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FutureInstances::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FutureInstances::ArenaDtor(void* object) {
  FutureInstances* _this = reinterpret_cast< FutureInstances* >(object);
  (void)_this;
}
void FutureInstances::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FutureInstances::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FutureInstances::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.FutureInstances)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamps_.Clear();
  primitives_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FutureInstances::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double timestamps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_timestamps(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 9) {
          _internal_add_timestamps(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .xviz.PrimitiveState primitives = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_primitives(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FutureInstances::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.FutureInstances)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double timestamps = 1;
  if (this->_internal_timestamps_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_timestamps(), target);
  }

  // repeated .xviz.PrimitiveState primitives = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_primitives_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_primitives(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.FutureInstances)
  return target;
}

size_t FutureInstances::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.FutureInstances)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double timestamps = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_timestamps_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated .xviz.PrimitiveState primitives = 2;
  total_size += 1UL * this->_internal_primitives_size();
  for (const auto& msg : this->primitives_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FutureInstances::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FutureInstances::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FutureInstances::GetClassData() const { return &_class_data_; }

void FutureInstances::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FutureInstances *>(to)->MergeFrom(
      static_cast<const FutureInstances &>(from));
}


void FutureInstances::MergeFrom(const FutureInstances& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.FutureInstances)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  timestamps_.MergeFrom(from.timestamps_);
  primitives_.MergeFrom(from.primitives_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FutureInstances::CopyFrom(const FutureInstances& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.FutureInstances)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureInstances::IsInitialized() const {
  return true;
}

void FutureInstances::InternalSwap(FutureInstances* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  timestamps_.InternalSwap(&other->timestamps_);
  primitives_.InternalSwap(&other->primitives_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FutureInstances::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2eproto_getter, &descriptor_table_core_2eproto_once,
      file_level_metadata_core_2eproto[13]);
}

// ===================================================================

class VariableState::_Internal {
 public:
};

VariableState::VariableState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  variables_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xviz.VariableState)
}
VariableState::VariableState(const VariableState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      variables_(from.variables_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xviz.VariableState)
}

inline void VariableState::SharedCtor() {
}

VariableState::~VariableState() {
  // @@protoc_insertion_point(destructor:xviz.VariableState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VariableState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VariableState::ArenaDtor(void* object) {
  VariableState* _this = reinterpret_cast< VariableState* >(object);
  (void)_this;
}
void VariableState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VariableState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VariableState::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.VariableState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variables_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VariableState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .xviz.Variable variables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_variables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VariableState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.VariableState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .xviz.Variable variables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_variables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_variables(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.VariableState)
  return target;
}

size_t VariableState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.VariableState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xviz.Variable variables = 1;
  total_size += 1UL * this->_internal_variables_size();
  for (const auto& msg : this->variables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VariableState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VariableState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VariableState::GetClassData() const { return &_class_data_; }

void VariableState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VariableState *>(to)->MergeFrom(
      static_cast<const VariableState &>(from));
}


void VariableState::MergeFrom(const VariableState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.VariableState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  variables_.MergeFrom(from.variables_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VariableState::CopyFrom(const VariableState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.VariableState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariableState::IsInitialized() const {
  return true;
}

void VariableState::InternalSwap(VariableState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  variables_.InternalSwap(&other->variables_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VariableState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2eproto_getter, &descriptor_table_core_2eproto_once,
      file_level_metadata_core_2eproto[14]);
}

// ===================================================================

class AnnotationState::_Internal {
 public:
};

void AnnotationState::clear_visuals() {
  visuals_.Clear();
}
AnnotationState::AnnotationState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  visuals_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xviz.AnnotationState)
}
AnnotationState::AnnotationState(const AnnotationState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      visuals_(from.visuals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xviz.AnnotationState)
}

inline void AnnotationState::SharedCtor() {
}

AnnotationState::~AnnotationState() {
  // @@protoc_insertion_point(destructor:xviz.AnnotationState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnnotationState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AnnotationState::ArenaDtor(void* object) {
  AnnotationState* _this = reinterpret_cast< AnnotationState* >(object);
  (void)_this;
}
void AnnotationState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnnotationState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnnotationState::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.AnnotationState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  visuals_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnnotationState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .xviz.Visual visuals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_visuals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnnotationState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.AnnotationState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .xviz.Visual visuals = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_visuals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_visuals(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.AnnotationState)
  return target;
}

size_t AnnotationState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.AnnotationState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xviz.Visual visuals = 1;
  total_size += 1UL * this->_internal_visuals_size();
  for (const auto& msg : this->visuals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnnotationState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AnnotationState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnnotationState::GetClassData() const { return &_class_data_; }

void AnnotationState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AnnotationState *>(to)->MergeFrom(
      static_cast<const AnnotationState &>(from));
}


void AnnotationState::MergeFrom(const AnnotationState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.AnnotationState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  visuals_.MergeFrom(from.visuals_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnnotationState::CopyFrom(const AnnotationState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.AnnotationState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotationState::IsInitialized() const {
  return true;
}

void AnnotationState::InternalSwap(AnnotationState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  visuals_.InternalSwap(&other->visuals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnnotationState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2eproto_getter, &descriptor_table_core_2eproto_once,
      file_level_metadata_core_2eproto[15]);
}

// ===================================================================

class Variable::_Internal {
 public:
  static const ::xviz::VariableBase& base(const Variable* msg);
  static const ::xviz::Values& values(const Variable* msg);
};

const ::xviz::VariableBase&
Variable::_Internal::base(const Variable* msg) {
  return *msg->base_;
}
const ::xviz::Values&
Variable::_Internal::values(const Variable* msg) {
  return *msg->values_;
}
Variable::Variable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xviz.Variable)
}
Variable::Variable(const Variable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::xviz::VariableBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_values()) {
    values_ = new ::xviz::Values(*from.values_);
  } else {
    values_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:xviz.Variable)
}

inline void Variable::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&values_) -
    reinterpret_cast<char*>(&base_)) + sizeof(values_));
}

Variable::~Variable() {
  // @@protoc_insertion_point(destructor:xviz.Variable)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Variable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete values_;
}

void Variable::ArenaDtor(void* object) {
  Variable* _this = reinterpret_cast< Variable* >(object);
  (void)_this;
}
void Variable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Variable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Variable::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.Variable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArenaForAllocation() == nullptr && values_ != nullptr) {
    delete values_;
  }
  values_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Variable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .xviz.VariableBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xviz.Values values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_values(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Variable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.Variable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .xviz.VariableBase base = 1;
  if (this->_internal_has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // .xviz.Values values = 2;
  if (this->_internal_has_values()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::values(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.Variable)
  return target;
}

size_t Variable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.Variable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .xviz.VariableBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .xviz.Values values = 2;
  if (this->_internal_has_values()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *values_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Variable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Variable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Variable::GetClassData() const { return &_class_data_; }

void Variable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Variable *>(to)->MergeFrom(
      static_cast<const Variable &>(from));
}


void Variable::MergeFrom(const Variable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.Variable)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_base()) {
    _internal_mutable_base()->::xviz::VariableBase::MergeFrom(from._internal_base());
  }
  if (from._internal_has_values()) {
    _internal_mutable_values()->::xviz::Values::MergeFrom(from._internal_values());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Variable::CopyFrom(const Variable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.Variable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Variable::IsInitialized() const {
  return true;
}

void Variable::InternalSwap(Variable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Variable, values_)
      + sizeof(Variable::values_)
      - PROTOBUF_FIELD_OFFSET(Variable, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Variable::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2eproto_getter, &descriptor_table_core_2eproto_once,
      file_level_metadata_core_2eproto[16]);
}

// ===================================================================

class VariableBase::_Internal {
 public:
};

VariableBase::VariableBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xviz.VariableBase)
}
VariableBase::VariableBase(const VariableBase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    object_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_object_id().empty()) {
    object_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_object_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:xviz.VariableBase)
}

inline void VariableBase::SharedCtor() {
object_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  object_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VariableBase::~VariableBase() {
  // @@protoc_insertion_point(destructor:xviz.VariableBase)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VariableBase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  object_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VariableBase::ArenaDtor(void* object) {
  VariableBase* _this = reinterpret_cast< VariableBase* >(object);
  (void)_this;
}
void VariableBase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VariableBase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VariableBase::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.VariableBase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VariableBase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_object_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.VariableBase.object_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VariableBase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.VariableBase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string object_id = 1;
  if (!this->_internal_object_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_object_id().data(), static_cast<int>(this->_internal_object_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.VariableBase.object_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.VariableBase)
  return target;
}

size_t VariableBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.VariableBase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string object_id = 1;
  if (!this->_internal_object_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VariableBase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VariableBase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VariableBase::GetClassData() const { return &_class_data_; }

void VariableBase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VariableBase *>(to)->MergeFrom(
      static_cast<const VariableBase &>(from));
}


void VariableBase::MergeFrom(const VariableBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.VariableBase)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_object_id().empty()) {
    _internal_set_object_id(from._internal_object_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VariableBase::CopyFrom(const VariableBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.VariableBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariableBase::IsInitialized() const {
  return true;
}

void VariableBase::InternalSwap(VariableBase* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &object_id_, lhs_arena,
      &other->object_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VariableBase::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2eproto_getter, &descriptor_table_core_2eproto_once,
      file_level_metadata_core_2eproto[17]);
}

// ===================================================================

class Values::_Internal {
 public:
};

Values::Values(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  doubles_(arena),
  int32s_(arena),
  bools_(arena),
  strings_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xviz.Values)
}
Values::Values(const Values& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      doubles_(from.doubles_),
      int32s_(from.int32s_),
      bools_(from.bools_),
      strings_(from.strings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xviz.Values)
}

inline void Values::SharedCtor() {
}

Values::~Values() {
  // @@protoc_insertion_point(destructor:xviz.Values)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Values::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Values::ArenaDtor(void* object) {
  Values* _this = reinterpret_cast< Values* >(object);
  (void)_this;
}
void Values::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Values::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Values::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.Values)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  doubles_.Clear();
  int32s_.Clear();
  bools_.Clear();
  strings_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Values::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double doubles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_doubles(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_doubles(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 int32s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_int32s(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_int32s(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool bools = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_bools(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_bools(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string strings = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_strings();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.Values.strings"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Values::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.Values)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double doubles = 2;
  if (this->_internal_doubles_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_doubles(), target);
  }

  // repeated int32 int32s = 3;
  {
    int byte_size = _int32s_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_int32s(), byte_size, target);
    }
  }

  // repeated bool bools = 4;
  if (this->_internal_bools_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_bools(), target);
  }

  // repeated string strings = 5;
  for (int i = 0, n = this->_internal_strings_size(); i < n; i++) {
    const auto& s = this->_internal_strings(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.Values.strings");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.Values)
  return target;
}

size_t Values::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.Values)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double doubles = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_doubles_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 int32s = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->int32s_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _int32s_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool bools = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bools_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated string strings = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(strings_.size());
  for (int i = 0, n = strings_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      strings_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Values::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Values::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Values::GetClassData() const { return &_class_data_; }

void Values::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Values *>(to)->MergeFrom(
      static_cast<const Values &>(from));
}


void Values::MergeFrom(const Values& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.Values)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  doubles_.MergeFrom(from.doubles_);
  int32s_.MergeFrom(from.int32s_);
  bools_.MergeFrom(from.bools_);
  strings_.MergeFrom(from.strings_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Values::CopyFrom(const Values& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.Values)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Values::IsInitialized() const {
  return true;
}

void Values::InternalSwap(Values* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  doubles_.InternalSwap(&other->doubles_);
  int32s_.InternalSwap(&other->int32s_);
  bools_.InternalSwap(&other->bools_);
  strings_.InternalSwap(&other->strings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Values::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2eproto_getter, &descriptor_table_core_2eproto_once,
      file_level_metadata_core_2eproto[18]);
}

// ===================================================================

class Link::_Internal {
 public:
};

Link::Link(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xviz.Link)
}
Link::Link(const Link& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_pose_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    target_pose_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target_pose().empty()) {
    target_pose_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_target_pose(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:xviz.Link)
}

inline void Link::SharedCtor() {
target_pose_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  target_pose_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Link::~Link() {
  // @@protoc_insertion_point(destructor:xviz.Link)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Link::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  target_pose_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Link::ArenaDtor(void* object) {
  Link* _this = reinterpret_cast< Link* >(object);
  (void)_this;
}
void Link::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Link::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Link::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.Link)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_pose_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Link::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string target_pose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_target_pose();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.Link.target_pose"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Link::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.Link)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string target_pose = 1;
  if (!this->_internal_target_pose().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_pose().data(), static_cast<int>(this->_internal_target_pose().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.Link.target_pose");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target_pose(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.Link)
  return target;
}

size_t Link::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.Link)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target_pose = 1;
  if (!this->_internal_target_pose().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_pose());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Link::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Link::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Link::GetClassData() const { return &_class_data_; }

void Link::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Link *>(to)->MergeFrom(
      static_cast<const Link &>(from));
}


void Link::MergeFrom(const Link& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.Link)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_target_pose().empty()) {
    _internal_set_target_pose(from._internal_target_pose());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Link::CopyFrom(const Link& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Link::IsInitialized() const {
  return true;
}

void Link::InternalSwap(Link* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &target_pose_, lhs_arena,
      &other->target_pose_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Link::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2eproto_getter, &descriptor_table_core_2eproto_once,
      file_level_metadata_core_2eproto[19]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace xviz
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xviz::StreamSet_PosesEntry_DoNotUse* Arena::CreateMaybeMessage< ::xviz::StreamSet_PosesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::StreamSet_PosesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::StreamSet_PrimitivesEntry_DoNotUse* Arena::CreateMaybeMessage< ::xviz::StreamSet_PrimitivesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::StreamSet_PrimitivesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::StreamSet_FutureInstancesEntry_DoNotUse* Arena::CreateMaybeMessage< ::xviz::StreamSet_FutureInstancesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::StreamSet_FutureInstancesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::StreamSet_VariablesEntry_DoNotUse* Arena::CreateMaybeMessage< ::xviz::StreamSet_VariablesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::StreamSet_VariablesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::StreamSet_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage< ::xviz::StreamSet_AnnotationsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::StreamSet_AnnotationsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::StreamSet_UiPrimitivesEntry_DoNotUse* Arena::CreateMaybeMessage< ::xviz::StreamSet_UiPrimitivesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::StreamSet_UiPrimitivesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::StreamSet_LinksEntry_DoNotUse* Arena::CreateMaybeMessage< ::xviz::StreamSet_LinksEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::StreamSet_LinksEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::StreamSet* Arena::CreateMaybeMessage< ::xviz::StreamSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::StreamSet >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::Pose* Arena::CreateMaybeMessage< ::xviz::Pose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::Pose >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::MapOrigin* Arena::CreateMaybeMessage< ::xviz::MapOrigin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::MapOrigin >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::PrimitiveState* Arena::CreateMaybeMessage< ::xviz::PrimitiveState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::PrimitiveState >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::UIPrimitiveState* Arena::CreateMaybeMessage< ::xviz::UIPrimitiveState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::UIPrimitiveState >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::TimeSeriesState* Arena::CreateMaybeMessage< ::xviz::TimeSeriesState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::TimeSeriesState >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::FutureInstances* Arena::CreateMaybeMessage< ::xviz::FutureInstances >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::FutureInstances >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::VariableState* Arena::CreateMaybeMessage< ::xviz::VariableState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::VariableState >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::AnnotationState* Arena::CreateMaybeMessage< ::xviz::AnnotationState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::AnnotationState >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::Variable* Arena::CreateMaybeMessage< ::xviz::Variable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::Variable >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::VariableBase* Arena::CreateMaybeMessage< ::xviz::VariableBase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::VariableBase >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::Values* Arena::CreateMaybeMessage< ::xviz::Values >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::Values >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::Link* Arena::CreateMaybeMessage< ::xviz::Link >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xviz::Link >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
