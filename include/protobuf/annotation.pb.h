// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: annotation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_annotation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_annotation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "protobuf/options.pb.h"
#include "protobuf/style.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_annotation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_annotation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_annotation_2eproto;
namespace xviz {
class Visual;
struct VisualDefaultTypeInternal;
extern VisualDefaultTypeInternal _Visual_default_instance_;
class VisualBase;
struct VisualBaseDefaultTypeInternal;
extern VisualBaseDefaultTypeInternal _VisualBase_default_instance_;
}  // namespace xviz
PROTOBUF_NAMESPACE_OPEN
template<> ::xviz::Visual* Arena::CreateMaybeMessage<::xviz::Visual>(Arena*);
template<> ::xviz::VisualBase* Arena::CreateMaybeMessage<::xviz::VisualBase>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xviz {

// ===================================================================

class VisualBase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz.VisualBase) */ {
 public:
  inline VisualBase() : VisualBase(nullptr) {}
  ~VisualBase() override;
  explicit constexpr VisualBase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VisualBase(const VisualBase& from);
  VisualBase(VisualBase&& from) noexcept
    : VisualBase() {
    *this = ::std::move(from);
  }

  inline VisualBase& operator=(const VisualBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisualBase& operator=(VisualBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VisualBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const VisualBase* internal_default_instance() {
    return reinterpret_cast<const VisualBase*>(
               &_VisualBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VisualBase& a, VisualBase& b) {
    a.Swap(&b);
  }
  inline void Swap(VisualBase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VisualBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VisualBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VisualBase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VisualBase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VisualBase& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VisualBase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz.VisualBase";
  }
  protected:
  explicit VisualBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
  };
  // string object_id = 1;
  void clear_object_id();
  const std::string& object_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_object_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_object_id();
  PROTOBUF_NODISCARD std::string* release_object_id();
  void set_allocated_object_id(std::string* object_id);
  private:
  const std::string& _internal_object_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_object_id(const std::string& value);
  std::string* _internal_mutable_object_id();
  public:

  // @@protoc_insertion_point(class_scope:xviz.VisualBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr object_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_annotation_2eproto;
};
// -------------------------------------------------------------------

class Visual final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz.Visual) */ {
 public:
  inline Visual() : Visual(nullptr) {}
  ~Visual() override;
  explicit constexpr Visual(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Visual(const Visual& from);
  Visual(Visual&& from) noexcept
    : Visual() {
    *this = ::std::move(from);
  }

  inline Visual& operator=(const Visual& from) {
    CopyFrom(from);
    return *this;
  }
  inline Visual& operator=(Visual&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Visual& default_instance() {
    return *internal_default_instance();
  }
  static inline const Visual* internal_default_instance() {
    return reinterpret_cast<const Visual*>(
               &_Visual_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Visual& a, Visual& b) {
    a.Swap(&b);
  }
  inline void Swap(Visual* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Visual* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Visual* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Visual>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Visual& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Visual& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Visual* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz.Visual";
  }
  protected:
  explicit Visual(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStyleClassesFieldNumber = 2,
    kBaseFieldNumber = 1,
    kInlineStyleFieldNumber = 3,
  };
  // repeated string style_classes = 2;
  int style_classes_size() const;
  private:
  int _internal_style_classes_size() const;
  public:
  void clear_style_classes();
  const std::string& style_classes(int index) const;
  std::string* mutable_style_classes(int index);
  void set_style_classes(int index, const std::string& value);
  void set_style_classes(int index, std::string&& value);
  void set_style_classes(int index, const char* value);
  void set_style_classes(int index, const char* value, size_t size);
  std::string* add_style_classes();
  void add_style_classes(const std::string& value);
  void add_style_classes(std::string&& value);
  void add_style_classes(const char* value);
  void add_style_classes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& style_classes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_style_classes();
  private:
  const std::string& _internal_style_classes(int index) const;
  std::string* _internal_add_style_classes();
  public:

  // .xviz.VisualBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::xviz::VisualBase& base() const;
  PROTOBUF_NODISCARD ::xviz::VisualBase* release_base();
  ::xviz::VisualBase* mutable_base();
  void set_allocated_base(::xviz::VisualBase* base);
  private:
  const ::xviz::VisualBase& _internal_base() const;
  ::xviz::VisualBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::xviz::VisualBase* base);
  ::xviz::VisualBase* unsafe_arena_release_base();

  // .xviz.StyleObjectValue inline_style = 3;
  bool has_inline_style() const;
  private:
  bool _internal_has_inline_style() const;
  public:
  void clear_inline_style();
  const ::xviz::StyleObjectValue& inline_style() const;
  PROTOBUF_NODISCARD ::xviz::StyleObjectValue* release_inline_style();
  ::xviz::StyleObjectValue* mutable_inline_style();
  void set_allocated_inline_style(::xviz::StyleObjectValue* inline_style);
  private:
  const ::xviz::StyleObjectValue& _internal_inline_style() const;
  ::xviz::StyleObjectValue* _internal_mutable_inline_style();
  public:
  void unsafe_arena_set_allocated_inline_style(
      ::xviz::StyleObjectValue* inline_style);
  ::xviz::StyleObjectValue* unsafe_arena_release_inline_style();

  // @@protoc_insertion_point(class_scope:xviz.Visual)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> style_classes_;
  ::xviz::VisualBase* base_;
  ::xviz::StyleObjectValue* inline_style_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_annotation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VisualBase

// string object_id = 1;
inline void VisualBase::clear_object_id() {
  object_id_.ClearToEmpty();
}
inline const std::string& VisualBase::object_id() const {
  // @@protoc_insertion_point(field_get:xviz.VisualBase.object_id)
  return _internal_object_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VisualBase::set_object_id(ArgT0&& arg0, ArgT... args) {
 
 object_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xviz.VisualBase.object_id)
}
inline std::string* VisualBase::mutable_object_id() {
  std::string* _s = _internal_mutable_object_id();
  // @@protoc_insertion_point(field_mutable:xviz.VisualBase.object_id)
  return _s;
}
inline const std::string& VisualBase::_internal_object_id() const {
  return object_id_.Get();
}
inline void VisualBase::_internal_set_object_id(const std::string& value) {
  
  object_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VisualBase::_internal_mutable_object_id() {
  
  return object_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VisualBase::release_object_id() {
  // @@protoc_insertion_point(field_release:xviz.VisualBase.object_id)
  return object_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VisualBase::set_allocated_object_id(std::string* object_id) {
  if (object_id != nullptr) {
    
  } else {
    
  }
  object_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), object_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (object_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    object_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xviz.VisualBase.object_id)
}

// -------------------------------------------------------------------

// Visual

// .xviz.VisualBase base = 1;
inline bool Visual::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool Visual::has_base() const {
  return _internal_has_base();
}
inline void Visual::clear_base() {
  if (GetArenaForAllocation() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::xviz::VisualBase& Visual::_internal_base() const {
  const ::xviz::VisualBase* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::xviz::VisualBase&>(
      ::xviz::_VisualBase_default_instance_);
}
inline const ::xviz::VisualBase& Visual::base() const {
  // @@protoc_insertion_point(field_get:xviz.Visual.base)
  return _internal_base();
}
inline void Visual::unsafe_arena_set_allocated_base(
    ::xviz::VisualBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xviz.Visual.base)
}
inline ::xviz::VisualBase* Visual::release_base() {
  
  ::xviz::VisualBase* temp = base_;
  base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xviz::VisualBase* Visual::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:xviz.Visual.base)
  
  ::xviz::VisualBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::xviz::VisualBase* Visual::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::xviz::VisualBase>(GetArenaForAllocation());
    base_ = p;
  }
  return base_;
}
inline ::xviz::VisualBase* Visual::mutable_base() {
  ::xviz::VisualBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:xviz.Visual.base)
  return _msg;
}
inline void Visual::set_allocated_base(::xviz::VisualBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::xviz::VisualBase>::GetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:xviz.Visual.base)
}

// repeated string style_classes = 2;
inline int Visual::_internal_style_classes_size() const {
  return style_classes_.size();
}
inline int Visual::style_classes_size() const {
  return _internal_style_classes_size();
}
inline void Visual::clear_style_classes() {
  style_classes_.Clear();
}
inline std::string* Visual::add_style_classes() {
  std::string* _s = _internal_add_style_classes();
  // @@protoc_insertion_point(field_add_mutable:xviz.Visual.style_classes)
  return _s;
}
inline const std::string& Visual::_internal_style_classes(int index) const {
  return style_classes_.Get(index);
}
inline const std::string& Visual::style_classes(int index) const {
  // @@protoc_insertion_point(field_get:xviz.Visual.style_classes)
  return _internal_style_classes(index);
}
inline std::string* Visual::mutable_style_classes(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.Visual.style_classes)
  return style_classes_.Mutable(index);
}
inline void Visual::set_style_classes(int index, const std::string& value) {
  style_classes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:xviz.Visual.style_classes)
}
inline void Visual::set_style_classes(int index, std::string&& value) {
  style_classes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:xviz.Visual.style_classes)
}
inline void Visual::set_style_classes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  style_classes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xviz.Visual.style_classes)
}
inline void Visual::set_style_classes(int index, const char* value, size_t size) {
  style_classes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xviz.Visual.style_classes)
}
inline std::string* Visual::_internal_add_style_classes() {
  return style_classes_.Add();
}
inline void Visual::add_style_classes(const std::string& value) {
  style_classes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xviz.Visual.style_classes)
}
inline void Visual::add_style_classes(std::string&& value) {
  style_classes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:xviz.Visual.style_classes)
}
inline void Visual::add_style_classes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  style_classes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xviz.Visual.style_classes)
}
inline void Visual::add_style_classes(const char* value, size_t size) {
  style_classes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xviz.Visual.style_classes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Visual::style_classes() const {
  // @@protoc_insertion_point(field_list:xviz.Visual.style_classes)
  return style_classes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Visual::mutable_style_classes() {
  // @@protoc_insertion_point(field_mutable_list:xviz.Visual.style_classes)
  return &style_classes_;
}

// .xviz.StyleObjectValue inline_style = 3;
inline bool Visual::_internal_has_inline_style() const {
  return this != internal_default_instance() && inline_style_ != nullptr;
}
inline bool Visual::has_inline_style() const {
  return _internal_has_inline_style();
}
inline const ::xviz::StyleObjectValue& Visual::_internal_inline_style() const {
  const ::xviz::StyleObjectValue* p = inline_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::xviz::StyleObjectValue&>(
      ::xviz::_StyleObjectValue_default_instance_);
}
inline const ::xviz::StyleObjectValue& Visual::inline_style() const {
  // @@protoc_insertion_point(field_get:xviz.Visual.inline_style)
  return _internal_inline_style();
}
inline void Visual::unsafe_arena_set_allocated_inline_style(
    ::xviz::StyleObjectValue* inline_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inline_style_);
  }
  inline_style_ = inline_style;
  if (inline_style) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xviz.Visual.inline_style)
}
inline ::xviz::StyleObjectValue* Visual::release_inline_style() {
  
  ::xviz::StyleObjectValue* temp = inline_style_;
  inline_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xviz::StyleObjectValue* Visual::unsafe_arena_release_inline_style() {
  // @@protoc_insertion_point(field_release:xviz.Visual.inline_style)
  
  ::xviz::StyleObjectValue* temp = inline_style_;
  inline_style_ = nullptr;
  return temp;
}
inline ::xviz::StyleObjectValue* Visual::_internal_mutable_inline_style() {
  
  if (inline_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::xviz::StyleObjectValue>(GetArenaForAllocation());
    inline_style_ = p;
  }
  return inline_style_;
}
inline ::xviz::StyleObjectValue* Visual::mutable_inline_style() {
  ::xviz::StyleObjectValue* _msg = _internal_mutable_inline_style();
  // @@protoc_insertion_point(field_mutable:xviz.Visual.inline_style)
  return _msg;
}
inline void Visual::set_allocated_inline_style(::xviz::StyleObjectValue* inline_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inline_style_);
  }
  if (inline_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inline_style));
    if (message_arena != submessage_arena) {
      inline_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inline_style, submessage_arena);
    }
    
  } else {
    
  }
  inline_style_ = inline_style;
  // @@protoc_insertion_point(field_set_allocated:xviz.Visual.inline_style)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace xviz

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_annotation_2eproto
