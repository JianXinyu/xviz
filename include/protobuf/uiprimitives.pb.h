// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uiprimitives.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_uiprimitives_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_uiprimitives_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "protobuf/options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_uiprimitives_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_uiprimitives_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_uiprimitives_2eproto;
namespace xviz {
class TreeTable;
struct TreeTableDefaultTypeInternal;
extern TreeTableDefaultTypeInternal _TreeTable_default_instance_;
class TreeTableColumn;
struct TreeTableColumnDefaultTypeInternal;
extern TreeTableColumnDefaultTypeInternal _TreeTableColumn_default_instance_;
class TreeTableNode;
struct TreeTableNodeDefaultTypeInternal;
extern TreeTableNodeDefaultTypeInternal _TreeTableNode_default_instance_;
}  // namespace xviz
PROTOBUF_NAMESPACE_OPEN
template<> ::xviz::TreeTable* Arena::CreateMaybeMessage<::xviz::TreeTable>(Arena*);
template<> ::xviz::TreeTableColumn* Arena::CreateMaybeMessage<::xviz::TreeTableColumn>(Arena*);
template<> ::xviz::TreeTableNode* Arena::CreateMaybeMessage<::xviz::TreeTableNode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xviz {

enum TreeTableColumn_ColumnType : int {
  TreeTableColumn_ColumnType_TREE_TABLE_COLUMN_COLUMN_TYPE_INVALID = 0,
  TreeTableColumn_ColumnType_INT32 = 1,
  TreeTableColumn_ColumnType_DOUBLE = 2,
  TreeTableColumn_ColumnType_STRING = 3,
  TreeTableColumn_ColumnType_BOOLEAN = 4,
  TreeTableColumn_ColumnType_TreeTableColumn_ColumnType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TreeTableColumn_ColumnType_TreeTableColumn_ColumnType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TreeTableColumn_ColumnType_IsValid(int value);
constexpr TreeTableColumn_ColumnType TreeTableColumn_ColumnType_ColumnType_MIN = TreeTableColumn_ColumnType_TREE_TABLE_COLUMN_COLUMN_TYPE_INVALID;
constexpr TreeTableColumn_ColumnType TreeTableColumn_ColumnType_ColumnType_MAX = TreeTableColumn_ColumnType_BOOLEAN;
constexpr int TreeTableColumn_ColumnType_ColumnType_ARRAYSIZE = TreeTableColumn_ColumnType_ColumnType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TreeTableColumn_ColumnType_descriptor();
template<typename T>
inline const std::string& TreeTableColumn_ColumnType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TreeTableColumn_ColumnType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TreeTableColumn_ColumnType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TreeTableColumn_ColumnType_descriptor(), enum_t_value);
}
inline bool TreeTableColumn_ColumnType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TreeTableColumn_ColumnType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TreeTableColumn_ColumnType>(
    TreeTableColumn_ColumnType_descriptor(), name, value);
}
// ===================================================================

class TreeTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz.TreeTable) */ {
 public:
  inline TreeTable() : TreeTable(nullptr) {}
  ~TreeTable() override;
  explicit constexpr TreeTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TreeTable(const TreeTable& from);
  TreeTable(TreeTable&& from) noexcept
    : TreeTable() {
    *this = ::std::move(from);
  }

  inline TreeTable& operator=(const TreeTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline TreeTable& operator=(TreeTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TreeTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const TreeTable* internal_default_instance() {
    return reinterpret_cast<const TreeTable*>(
               &_TreeTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TreeTable& a, TreeTable& b) {
    a.Swap(&b);
  }
  inline void Swap(TreeTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TreeTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TreeTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TreeTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TreeTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TreeTable& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TreeTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz.TreeTable";
  }
  protected:
  explicit TreeTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnsFieldNumber = 1,
    kNodesFieldNumber = 2,
  };
  // repeated .xviz.TreeTableColumn columns = 1;
  int columns_size() const;
  private:
  int _internal_columns_size() const;
  public:
  void clear_columns();
  ::xviz::TreeTableColumn* mutable_columns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::TreeTableColumn >*
      mutable_columns();
  private:
  const ::xviz::TreeTableColumn& _internal_columns(int index) const;
  ::xviz::TreeTableColumn* _internal_add_columns();
  public:
  const ::xviz::TreeTableColumn& columns(int index) const;
  ::xviz::TreeTableColumn* add_columns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::TreeTableColumn >&
      columns() const;

  // repeated .xviz.TreeTableNode nodes = 2;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::xviz::TreeTableNode* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::TreeTableNode >*
      mutable_nodes();
  private:
  const ::xviz::TreeTableNode& _internal_nodes(int index) const;
  ::xviz::TreeTableNode* _internal_add_nodes();
  public:
  const ::xviz::TreeTableNode& nodes(int index) const;
  ::xviz::TreeTableNode* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::TreeTableNode >&
      nodes() const;

  // @@protoc_insertion_point(class_scope:xviz.TreeTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::TreeTableColumn > columns_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::TreeTableNode > nodes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_uiprimitives_2eproto;
};
// -------------------------------------------------------------------

class TreeTableColumn final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz.TreeTableColumn) */ {
 public:
  inline TreeTableColumn() : TreeTableColumn(nullptr) {}
  ~TreeTableColumn() override;
  explicit constexpr TreeTableColumn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TreeTableColumn(const TreeTableColumn& from);
  TreeTableColumn(TreeTableColumn&& from) noexcept
    : TreeTableColumn() {
    *this = ::std::move(from);
  }

  inline TreeTableColumn& operator=(const TreeTableColumn& from) {
    CopyFrom(from);
    return *this;
  }
  inline TreeTableColumn& operator=(TreeTableColumn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TreeTableColumn& default_instance() {
    return *internal_default_instance();
  }
  static inline const TreeTableColumn* internal_default_instance() {
    return reinterpret_cast<const TreeTableColumn*>(
               &_TreeTableColumn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TreeTableColumn& a, TreeTableColumn& b) {
    a.Swap(&b);
  }
  inline void Swap(TreeTableColumn* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TreeTableColumn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TreeTableColumn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TreeTableColumn>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TreeTableColumn& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TreeTableColumn& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TreeTableColumn* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz.TreeTableColumn";
  }
  protected:
  explicit TreeTableColumn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TreeTableColumn_ColumnType ColumnType;
  static constexpr ColumnType TREE_TABLE_COLUMN_COLUMN_TYPE_INVALID =
    TreeTableColumn_ColumnType_TREE_TABLE_COLUMN_COLUMN_TYPE_INVALID;
  static constexpr ColumnType INT32 =
    TreeTableColumn_ColumnType_INT32;
  static constexpr ColumnType DOUBLE =
    TreeTableColumn_ColumnType_DOUBLE;
  static constexpr ColumnType STRING =
    TreeTableColumn_ColumnType_STRING;
  static constexpr ColumnType BOOLEAN =
    TreeTableColumn_ColumnType_BOOLEAN;
  static inline bool ColumnType_IsValid(int value) {
    return TreeTableColumn_ColumnType_IsValid(value);
  }
  static constexpr ColumnType ColumnType_MIN =
    TreeTableColumn_ColumnType_ColumnType_MIN;
  static constexpr ColumnType ColumnType_MAX =
    TreeTableColumn_ColumnType_ColumnType_MAX;
  static constexpr int ColumnType_ARRAYSIZE =
    TreeTableColumn_ColumnType_ColumnType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ColumnType_descriptor() {
    return TreeTableColumn_ColumnType_descriptor();
  }
  template<typename T>
  static inline const std::string& ColumnType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ColumnType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ColumnType_Name.");
    return TreeTableColumn_ColumnType_Name(enum_t_value);
  }
  static inline bool ColumnType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ColumnType* value) {
    return TreeTableColumn_ColumnType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDisplayTextFieldNumber = 1,
    kUnitFieldNumber = 3,
    kTypeFieldNumber = 2,
  };
  // string display_text = 1;
  void clear_display_text();
  const std::string& display_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_text();
  PROTOBUF_NODISCARD std::string* release_display_text();
  void set_allocated_display_text(std::string* display_text);
  private:
  const std::string& _internal_display_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_text(const std::string& value);
  std::string* _internal_mutable_display_text();
  public:

  // string unit = 3;
  void clear_unit();
  const std::string& unit() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unit(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unit();
  PROTOBUF_NODISCARD std::string* release_unit();
  void set_allocated_unit(std::string* unit);
  private:
  const std::string& _internal_unit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unit(const std::string& value);
  std::string* _internal_mutable_unit();
  public:

  // .xviz.TreeTableColumn.ColumnType type = 2;
  void clear_type();
  ::xviz::TreeTableColumn_ColumnType type() const;
  void set_type(::xviz::TreeTableColumn_ColumnType value);
  private:
  ::xviz::TreeTableColumn_ColumnType _internal_type() const;
  void _internal_set_type(::xviz::TreeTableColumn_ColumnType value);
  public:

  // @@protoc_insertion_point(class_scope:xviz.TreeTableColumn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_uiprimitives_2eproto;
};
// -------------------------------------------------------------------

class TreeTableNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz.TreeTableNode) */ {
 public:
  inline TreeTableNode() : TreeTableNode(nullptr) {}
  ~TreeTableNode() override;
  explicit constexpr TreeTableNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TreeTableNode(const TreeTableNode& from);
  TreeTableNode(TreeTableNode&& from) noexcept
    : TreeTableNode() {
    *this = ::std::move(from);
  }

  inline TreeTableNode& operator=(const TreeTableNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline TreeTableNode& operator=(TreeTableNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TreeTableNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const TreeTableNode* internal_default_instance() {
    return reinterpret_cast<const TreeTableNode*>(
               &_TreeTableNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TreeTableNode& a, TreeTableNode& b) {
    a.Swap(&b);
  }
  inline void Swap(TreeTableNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TreeTableNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TreeTableNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TreeTableNode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TreeTableNode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TreeTableNode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TreeTableNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz.TreeTableNode";
  }
  protected:
  explicit TreeTableNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnValuesFieldNumber = 3,
    kIdFieldNumber = 1,
    kParentFieldNumber = 2,
  };
  // repeated string column_values = 3;
  int column_values_size() const;
  private:
  int _internal_column_values_size() const;
  public:
  void clear_column_values();
  const std::string& column_values(int index) const;
  std::string* mutable_column_values(int index);
  void set_column_values(int index, const std::string& value);
  void set_column_values(int index, std::string&& value);
  void set_column_values(int index, const char* value);
  void set_column_values(int index, const char* value, size_t size);
  std::string* add_column_values();
  void add_column_values(const std::string& value);
  void add_column_values(std::string&& value);
  void add_column_values(const char* value);
  void add_column_values(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& column_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_column_values();
  private:
  const std::string& _internal_column_values(int index) const;
  std::string* _internal_add_column_values();
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 parent = 2;
  void clear_parent();
  int32_t parent() const;
  void set_parent(int32_t value);
  private:
  int32_t _internal_parent() const;
  void _internal_set_parent(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:xviz.TreeTableNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> column_values_;
  int32_t id_;
  int32_t parent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_uiprimitives_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TreeTable

// repeated .xviz.TreeTableColumn columns = 1;
inline int TreeTable::_internal_columns_size() const {
  return columns_.size();
}
inline int TreeTable::columns_size() const {
  return _internal_columns_size();
}
inline void TreeTable::clear_columns() {
  columns_.Clear();
}
inline ::xviz::TreeTableColumn* TreeTable::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.TreeTable.columns)
  return columns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::TreeTableColumn >*
TreeTable::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:xviz.TreeTable.columns)
  return &columns_;
}
inline const ::xviz::TreeTableColumn& TreeTable::_internal_columns(int index) const {
  return columns_.Get(index);
}
inline const ::xviz::TreeTableColumn& TreeTable::columns(int index) const {
  // @@protoc_insertion_point(field_get:xviz.TreeTable.columns)
  return _internal_columns(index);
}
inline ::xviz::TreeTableColumn* TreeTable::_internal_add_columns() {
  return columns_.Add();
}
inline ::xviz::TreeTableColumn* TreeTable::add_columns() {
  ::xviz::TreeTableColumn* _add = _internal_add_columns();
  // @@protoc_insertion_point(field_add:xviz.TreeTable.columns)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::TreeTableColumn >&
TreeTable::columns() const {
  // @@protoc_insertion_point(field_list:xviz.TreeTable.columns)
  return columns_;
}

// repeated .xviz.TreeTableNode nodes = 2;
inline int TreeTable::_internal_nodes_size() const {
  return nodes_.size();
}
inline int TreeTable::nodes_size() const {
  return _internal_nodes_size();
}
inline void TreeTable::clear_nodes() {
  nodes_.Clear();
}
inline ::xviz::TreeTableNode* TreeTable::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.TreeTable.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::TreeTableNode >*
TreeTable::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:xviz.TreeTable.nodes)
  return &nodes_;
}
inline const ::xviz::TreeTableNode& TreeTable::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const ::xviz::TreeTableNode& TreeTable::nodes(int index) const {
  // @@protoc_insertion_point(field_get:xviz.TreeTable.nodes)
  return _internal_nodes(index);
}
inline ::xviz::TreeTableNode* TreeTable::_internal_add_nodes() {
  return nodes_.Add();
}
inline ::xviz::TreeTableNode* TreeTable::add_nodes() {
  ::xviz::TreeTableNode* _add = _internal_add_nodes();
  // @@protoc_insertion_point(field_add:xviz.TreeTable.nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::TreeTableNode >&
TreeTable::nodes() const {
  // @@protoc_insertion_point(field_list:xviz.TreeTable.nodes)
  return nodes_;
}

// -------------------------------------------------------------------

// TreeTableColumn

// string display_text = 1;
inline void TreeTableColumn::clear_display_text() {
  display_text_.ClearToEmpty();
}
inline const std::string& TreeTableColumn::display_text() const {
  // @@protoc_insertion_point(field_get:xviz.TreeTableColumn.display_text)
  return _internal_display_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TreeTableColumn::set_display_text(ArgT0&& arg0, ArgT... args) {
 
 display_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xviz.TreeTableColumn.display_text)
}
inline std::string* TreeTableColumn::mutable_display_text() {
  std::string* _s = _internal_mutable_display_text();
  // @@protoc_insertion_point(field_mutable:xviz.TreeTableColumn.display_text)
  return _s;
}
inline const std::string& TreeTableColumn::_internal_display_text() const {
  return display_text_.Get();
}
inline void TreeTableColumn::_internal_set_display_text(const std::string& value) {
  
  display_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TreeTableColumn::_internal_mutable_display_text() {
  
  return display_text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TreeTableColumn::release_display_text() {
  // @@protoc_insertion_point(field_release:xviz.TreeTableColumn.display_text)
  return display_text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TreeTableColumn::set_allocated_display_text(std::string* display_text) {
  if (display_text != nullptr) {
    
  } else {
    
  }
  display_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_text,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (display_text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    display_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xviz.TreeTableColumn.display_text)
}

// .xviz.TreeTableColumn.ColumnType type = 2;
inline void TreeTableColumn::clear_type() {
  type_ = 0;
}
inline ::xviz::TreeTableColumn_ColumnType TreeTableColumn::_internal_type() const {
  return static_cast< ::xviz::TreeTableColumn_ColumnType >(type_);
}
inline ::xviz::TreeTableColumn_ColumnType TreeTableColumn::type() const {
  // @@protoc_insertion_point(field_get:xviz.TreeTableColumn.type)
  return _internal_type();
}
inline void TreeTableColumn::_internal_set_type(::xviz::TreeTableColumn_ColumnType value) {
  
  type_ = value;
}
inline void TreeTableColumn::set_type(::xviz::TreeTableColumn_ColumnType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:xviz.TreeTableColumn.type)
}

// string unit = 3;
inline void TreeTableColumn::clear_unit() {
  unit_.ClearToEmpty();
}
inline const std::string& TreeTableColumn::unit() const {
  // @@protoc_insertion_point(field_get:xviz.TreeTableColumn.unit)
  return _internal_unit();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TreeTableColumn::set_unit(ArgT0&& arg0, ArgT... args) {
 
 unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xviz.TreeTableColumn.unit)
}
inline std::string* TreeTableColumn::mutable_unit() {
  std::string* _s = _internal_mutable_unit();
  // @@protoc_insertion_point(field_mutable:xviz.TreeTableColumn.unit)
  return _s;
}
inline const std::string& TreeTableColumn::_internal_unit() const {
  return unit_.Get();
}
inline void TreeTableColumn::_internal_set_unit(const std::string& value) {
  
  unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TreeTableColumn::_internal_mutable_unit() {
  
  return unit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TreeTableColumn::release_unit() {
  // @@protoc_insertion_point(field_release:xviz.TreeTableColumn.unit)
  return unit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TreeTableColumn::set_allocated_unit(std::string* unit) {
  if (unit != nullptr) {
    
  } else {
    
  }
  unit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unit,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (unit_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    unit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xviz.TreeTableColumn.unit)
}

// -------------------------------------------------------------------

// TreeTableNode

// int32 id = 1;
inline void TreeTableNode::clear_id() {
  id_ = 0;
}
inline int32_t TreeTableNode::_internal_id() const {
  return id_;
}
inline int32_t TreeTableNode::id() const {
  // @@protoc_insertion_point(field_get:xviz.TreeTableNode.id)
  return _internal_id();
}
inline void TreeTableNode::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void TreeTableNode::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:xviz.TreeTableNode.id)
}

// int32 parent = 2;
inline void TreeTableNode::clear_parent() {
  parent_ = 0;
}
inline int32_t TreeTableNode::_internal_parent() const {
  return parent_;
}
inline int32_t TreeTableNode::parent() const {
  // @@protoc_insertion_point(field_get:xviz.TreeTableNode.parent)
  return _internal_parent();
}
inline void TreeTableNode::_internal_set_parent(int32_t value) {
  
  parent_ = value;
}
inline void TreeTableNode::set_parent(int32_t value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:xviz.TreeTableNode.parent)
}

// repeated string column_values = 3;
inline int TreeTableNode::_internal_column_values_size() const {
  return column_values_.size();
}
inline int TreeTableNode::column_values_size() const {
  return _internal_column_values_size();
}
inline void TreeTableNode::clear_column_values() {
  column_values_.Clear();
}
inline std::string* TreeTableNode::add_column_values() {
  std::string* _s = _internal_add_column_values();
  // @@protoc_insertion_point(field_add_mutable:xviz.TreeTableNode.column_values)
  return _s;
}
inline const std::string& TreeTableNode::_internal_column_values(int index) const {
  return column_values_.Get(index);
}
inline const std::string& TreeTableNode::column_values(int index) const {
  // @@protoc_insertion_point(field_get:xviz.TreeTableNode.column_values)
  return _internal_column_values(index);
}
inline std::string* TreeTableNode::mutable_column_values(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.TreeTableNode.column_values)
  return column_values_.Mutable(index);
}
inline void TreeTableNode::set_column_values(int index, const std::string& value) {
  column_values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:xviz.TreeTableNode.column_values)
}
inline void TreeTableNode::set_column_values(int index, std::string&& value) {
  column_values_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:xviz.TreeTableNode.column_values)
}
inline void TreeTableNode::set_column_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xviz.TreeTableNode.column_values)
}
inline void TreeTableNode::set_column_values(int index, const char* value, size_t size) {
  column_values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xviz.TreeTableNode.column_values)
}
inline std::string* TreeTableNode::_internal_add_column_values() {
  return column_values_.Add();
}
inline void TreeTableNode::add_column_values(const std::string& value) {
  column_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xviz.TreeTableNode.column_values)
}
inline void TreeTableNode::add_column_values(std::string&& value) {
  column_values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:xviz.TreeTableNode.column_values)
}
inline void TreeTableNode::add_column_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xviz.TreeTableNode.column_values)
}
inline void TreeTableNode::add_column_values(const char* value, size_t size) {
  column_values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xviz.TreeTableNode.column_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TreeTableNode::column_values() const {
  // @@protoc_insertion_point(field_list:xviz.TreeTableNode.column_values)
  return column_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TreeTableNode::mutable_column_values() {
  // @@protoc_insertion_point(field_mutable_list:xviz.TreeTableNode.column_values)
  return &column_values_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace xviz

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::xviz::TreeTableColumn_ColumnType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xviz::TreeTableColumn_ColumnType>() {
  return ::xviz::TreeTableColumn_ColumnType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_uiprimitives_2eproto
